#version 430 compatibility
#extension GL_ARB_COMPUTE_SHADER : enable
#extension GL_ARB_SHADER_STORAGE_BUFFER_OBJECT : enable
#extension GL_NV_shader_buffer_load : enable
#extension GL_EXT_gpu_shader4: enable

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

const int type_sphere = 1;
const int type_box = 2;
const int type_cylinder = 3;
const int type_triangle = 4;
const float Epsilon = 0.0001;
const float PI = 3.14159f;

uniform float MAX_FLOAT;


struct Object
{
	vec3 Kd, Ks, Kt;
	float Ior, alpha;
	bool isLight;
	bool isActive;
};

struct Ray
{
	vec3 Q, D;
	void Init(vec3 _q, vec3 _d) { Q = _q; D = _d; }
	vec3 Evaluate(float t) { return Q + t * D; }
};

struct Intersection
{
	float t;		// Parameter value on ray of point of intersection
	Object object;	// A pointer to Shape intersected
	vec3 P;			// Point of intersection (in world coordinates)
	vec3 N;			// Normal of surface at the intersection point (in world coordinates)
	vec2 UV;		// Texture coordinates at the intersection point

	void Init()
	{
		t = MAX_FLOAT;		P = vec3(0.0f);
		N = vec3(0.0f);		UV = vec2(0.0f);
	}

	void Create(Object _o, vec3 _p, vec3 _n)
	{
		object = _o;	P = _p;		N = _n;		object.isActive = true;
	}

	void Update(float _t, vec3 _p, vec3 _n, vec2 _uv, Object _o)
	{
		if (_t < t)
		{
			t = _t;			P = _p;			N = normalize(_n);
			UV = _uv;		object = _o;	object.isActive = true;
		}
	}
};

struct Slab
{
	vec3 N;
	float d0, d1;
};

struct Interval
{
	float t0, t1;	// Beginning and ending point along a ray
	vec3 N0, N1;	// Surface normals at t0 and t1 respectively

	void Init() { t0 = 0.0f; t1 = MAX_FLOAT; }
	void Intersect(Ray ray, Slab slab)
	{
		float tt0, tt1;
		vec3 _N0, _N1;
		if(dot(slab.N,ray.D) != 0.0f)
		{
			tt0 = -(slab.d0 + dot(slab.N,ray.Q)) / dot(slab.N,ray.D);
			tt1 = -(slab.d1 + dot(slab.N,ray.Q)) / dot(slab.N,ray.D);
			_N0 = -slab.N;
			_N1 = slab.N;
			if(tt0 > tt1)
			{
				float t = tt0;
				tt0 = tt1;
				tt1 = t;
				_N0 = -_N0;
				_N1 = -_N1;
			}
		}
		else
		{
			float s0 = dot(slab.N,ray.Q) + slab.d0;
			float s1 = dot(slab.N,ray.Q) + slab.d1;
			if((s0 > 0 && s1 < 0) || (s0 < 0 && s1 > 0))
			{
				tt0 = 0;
				tt1 = MAX_FLOAT;
			}
			else
			{
				tt0 = 1;
				tt1 = 0;
			}
		}
	
		t0 = t0 > tt0 ? t0 : tt0;
		t1 = t1 < tt1 ? t1 : tt1;
	
		if (t0 == tt0)
		{
			N0 = _N0;
		}
		if (t1 == tt1)
		{
			N1 = _N1;
		}
	}
};

struct Sphere
{
	vec3 center;
	float radius;
};

struct Box
{
	Slab slabs[3];
	vec3 corner;
	vec3 diagonal;
};

struct Cylinder
{
	vec3 base;
	vec3 axis;
	float radius;
};

struct Triangle
{
	vec3 v0,v1,v2;
	vec3 n0,n1,n2;
	vec2 t0,t1,t2;
};

Intersection SphereIntersection(Ray ray, Intersection i,Sphere data, Object o)
{
	vec3 Qbar = ray.Q - data.center;
	float QbarD = dot(Qbar,ray.D);
	float QbarQ = dot(Qbar,Qbar);
	float descriminat = QbarD * QbarD - QbarQ + data.radius * data.radius;
	if (descriminat < 0.0f)
	{
		return i; // No intersection
	}
	float sqrval = sqrt(descriminat);

	float pT = -QbarD + sqrval;
	float nT = -QbarD - sqrval;

	if (pT < 0.0f && nT < 0.0f)
	{
		return i; // No intersection
	}
	float t = MAX_FLOAT;
	if (pT < nT && pT > Epsilon)
	{
		t = pT;
	}
	else if(pT > nT && nT > Epsilon)
	{
		t = nT;
	}
	else if (pT > 0.0f && pT > Epsilon)
	{
		t = pT;
	}
	else if(nT > 0.0f && nT > Epsilon)
	{
		t = nT;
	}
	vec3 point = ray.Evaluate(t);
	vec3 normal = normalize(point - data.center);
	float theta = atan(dot(normal,vec3(0.0f, 1.0f, 0.0f)), dot(normal,vec3(1.0f, 0.0f, 0.0f)));
	float fi = acos(dot(normal,vec3(0.0f, 0.0f, 1.0f)));
	vec2 uv = vec2(theta/(2*PI), fi/PI);
	i.Update(t, point, normal, uv, o);
	return i;
}

Intersection BoxIntersection(Ray ray, Intersection i, Box data, Object o)
{
	Interval interval;
	for (int i = 0; i < 3; ++i)
	{
		interval.Intersect(ray, data.slabs[i]);
	}

	if (interval.t0 > interval.t1 || (interval.t0 < 0.0f && interval.t1 < 0.0f))
	{
		return i; // No intersection
	}
	float t = MAX_FLOAT;
	vec3 normal;
	if (interval.t0 <= interval.t1 && interval.t0 > Epsilon)
	{
		t = interval.t0;
		normal = interval.N0;
	}
	else if (interval.t1 <= interval.t0 && interval.t1 > Epsilon)
	{
		t = interval.t1;
		normal = interval.N1;
	}
	vec3 point = ray.Evaluate(t);
	vec2 uv = vec2(0, 0);
	i.Update(t, point, normal, uv, o);
	return i;
}

Intersection CylinderIntersection(Ray ray, Intersection i, Cylinder data, Object o)
{
	return i;
}

Intersection TriangleIntersection(Ray ray, Intersection i, Triangle data, Object o)
{
	return i;
}

struct Shape
{
	Object object;
	int shapeType;

	Sphere sphereData;
	Box boxData;
	Cylinder cylinderData;
	Triangle triangleData;

	Intersection Intersect(Ray ray, Intersection i)
	{
		switch(shapeType)
		{
			case type_sphere:
				return SphereIntersection(ray,i,sphereData,object);
			break;
			case type_box:
				return BoxIntersection(ray,i,boxData,object);
			break;
			case type_cylinder:
				return CylinderIntersection(ray,i,cylinderData,object);
			break;
			case type_triangle:
				return TriangleIntersection(ray,i,triangleData,object);
			break;
		}
	}
};

uniform int max_passes;
uniform vec3 eye;
uniform vec3 X;
uniform vec3 Y;
uniform vec3 Z;
uniform int width;
uniform int height;
uniform int Shapes_num;

layout(std430, binding = 1) buffer ShapesList
{
	Shape AllShapes[];
};

layout(std430, binding = 2) buffer OutputColor
{
	vec4 out_Image[];
};

layout(std430, binding = 3) buffer Randoms
{
	float randoms[];
};

void main()
{
	vec3 E = eye;

	uint x = gl_GlobalInvocationID.x;
	uint y = gl_GlobalInvocationID.y;

	for (int pass = 1; pass <= max_passes; ++pass)
	{	
		//float dx = 2 * (x + randoms[x+pass]) / width - 1;
		//float dy = 2 * (y + randoms[y+pass]) / height - 1;
		float dx = 2 * (x + 0.5f) / width - 1;
		float dy = 2 * (y + 0.5f) / height - 1;

		vec3 dir = normalize(dx * X + dy * Y + Z);
		Ray ray;
		ray.Init(E, dir);
		Intersection data;
		data.Init();
		for(int i = 0; i < Shapes_num; ++i)
		{
			data = AllShapes[i].Intersect(ray,data);
		}

		if(data.object.isActive)
		{
			out_Image[y * width + x] = vec4(1,0,0,1);
		}
		else
		{
			out_Image[y*width + x] = vec4(0,1,0,1);
		}
		//vec3 test = imagePointer[y * width + x];
		//test += TraceRay(ray);
		//if (!(isnan(test.x) || isinf(test.x) ||
		//	isnan(test.y) || isinf(test.y) || 
		//	isnan(test.z) || isinf(test.z)))
		//{
		//	imagePointer[y * width + x] = test;
		//}
	}
}