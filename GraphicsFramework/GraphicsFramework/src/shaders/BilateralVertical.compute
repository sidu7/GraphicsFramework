#version 430
layout(local_size_x = 1, local_size_y = 128, local_size_z = 1) in;

uniform blurKernel{ float weights[101]; };
uniform int width;

const float pi = 22.0f / 7.0f;

layout(rgba32f) uniform readonly image2D src;
layout(rgba32f) uniform readonly image2D normals;
layout(rgba32f) uniform readonly image2D worldpos;
layout(rgba32f) uniform writeonly image2D dst;

shared vec4 v[128 + 101];
shared vec4 n[128 + 101];
shared vec4 w[128 + 101];

void main()
{
	ivec2 gpos = ivec2(gl_GlobalInvocationID.xy);

	uint i = gl_LocalInvocationID.y;

	v[i] = imageLoad(src, gpos + ivec2(0, -width));
	n[i] = imageLoad(normals, gpos + ivec2(-width, 0));
	w[i] = imageLoad(worldpos, gpos + ivec2(-width, 0));
	if (i < 2 * width)
	{
		v[i + 128] = imageLoad(src, gpos + ivec2(0, 128 - width));
		n[i + 128] = imageLoad(normals, gpos + ivec2(128 - width, 0));
		w[i + 128] = imageLoad(worldpos, gpos + ivec2(128 - width, 0));
	}

	barrier();

	vec4 sum = vec4(0.0);
	for (uint j = i; j <= i + 2 * width; ++j)
	{
		vec3 N = n[j].xyz;
		float d = w[j].w;
		vec3 Ni = n[j - i].xyz;
		float di = w[j - i].w;

		float R = max(dot(Ni, N), 0.0f) * (1.0f / sqrt(2.0 * pi * 0.01)) * exp(-pow((di - d), 2) / 0.02f);

		float W = weights[j - i] * R;

		sum += W * v[j];
	}

	imageStore(dst, gpos, sum);
}