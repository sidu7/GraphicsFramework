diff --git a/GraphicsFramework/AdvancedRenderingTechniques/AdvancedRenderingTechniques.vcxproj b/GraphicsFramework/AdvancedRenderingTechniques/AdvancedRenderingTechniques.vcxproj
index 4f20527..8b84252 100644
--- a/GraphicsFramework/AdvancedRenderingTechniques/AdvancedRenderingTechniques.vcxproj
+++ b/GraphicsFramework/AdvancedRenderingTechniques/AdvancedRenderingTechniques.vcxproj
@@ -261,8 +261,10 @@
     <None Include="res\motionblur\Reconstruction.vert" />
     <None Include="res\motionblur\TileMax.frag" />
     <None Include="res\motionblur\TileMax.vert" />
+    <None Include="res\Settings.json" />
     <None Include="res\shaders\Ambient.frag" />
     <None Include="res\shaders\Ambient.vert" />
+    <None Include="res\shaders\AmbientNoAO.frag" />
     <None Include="res\shaders\AO.frag" />
     <None Include="res\shaders\AO.vert" />
     <None Include="res\shaders\Blur.frag" />
@@ -273,7 +275,7 @@
     <None Include="res\shaders\Lighting.vert" />
     <None Include="res\shaders\LocalLight.frag" />
     <None Include="res\shaders\LocalLight.vert" />
-    <None Include="res\shaders\ShadersList.ini" />
+    <None Include="res\shaders\ShadersList.json" />
     <None Include="res\shaders\Shadow.frag" />
     <None Include="res\shaders\Shadow.vert" />
     <None Include="res\shaders\SkyDome.frag" />
diff --git a/GraphicsFramework/AdvancedRenderingTechniques/AdvancedRenderingTechniques.vcxproj.filters b/GraphicsFramework/AdvancedRenderingTechniques/AdvancedRenderingTechniques.vcxproj.filters
index cbe1e48..5a5c0d1 100644
--- a/GraphicsFramework/AdvancedRenderingTechniques/AdvancedRenderingTechniques.vcxproj.filters
+++ b/GraphicsFramework/AdvancedRenderingTechniques/AdvancedRenderingTechniques.vcxproj.filters
@@ -205,8 +205,14 @@
     <None Include="res\motionblur\TileMax.vert">
       <Filter>Resource Files\MotionBlur</Filter>
     </None>
-    <None Include="res\shaders\ShadersList.ini">
+    <None Include="res\shaders\ShadersList.json">
       <Filter>Resource Files\Shaders</Filter>
     </None>
+    <None Include="res\shaders\AmbientNoAO.frag">
+      <Filter>Resource Files\Shaders</Filter>
+    </None>
+    <None Include="res\Settings.json">
+      <Filter>Resource Files</Filter>
+    </None>
   </ItemGroup>
 </Project>
\ No newline at end of file
diff --git a/GraphicsFramework/AdvancedRenderingTechniques/imgui.ini b/GraphicsFramework/AdvancedRenderingTechniques/imgui.ini
index 5dd41d1..4942933 100644
--- a/GraphicsFramework/AdvancedRenderingTechniques/imgui.ini
+++ b/GraphicsFramework/AdvancedRenderingTechniques/imgui.ini
@@ -1,20 +1,16 @@
 [Window][Debug##Default]
 Pos=60,60
 Size=400,400
-Collapsed=0
 
 [Window][G-Buffer]
 Pos=10,170
 Size=423,376
-Collapsed=0
 
 [Window][FPS]
 Pos=11,9
 Size=277,84
-Collapsed=0
 
 [Window][Projects]
 Pos=9,99
 Size=366,68
-Collapsed=0
 
diff --git a/GraphicsFramework/AdvancedRenderingTechniques/res/shaders/AO.frag b/GraphicsFramework/AdvancedRenderingTechniques/res/shaders/AO.frag
index 5a24113..5788d1a 100644
--- a/GraphicsFramework/AdvancedRenderingTechniques/res/shaders/AO.frag
+++ b/GraphicsFramework/AdvancedRenderingTechniques/res/shaders/AO.frag
@@ -6,8 +6,8 @@ const float pi = 22.0f/7.0f;
 
 in vec2 TexCoord;
 
-uniform sampler2D normaltex;
-uniform sampler2D worldpostex;
+layout (binding = 2) uniform sampler2D normaltex;
+layout (binding = 3) uniform sampler2D worldpostex;
 uniform float contrast;
 uniform float AOR;
 uniform int AOn;
diff --git a/GraphicsFramework/AdvancedRenderingTechniques/res/shaders/Ambient.frag b/GraphicsFramework/AdvancedRenderingTechniques/res/shaders/Ambient.frag
index ea4fa71..f42b1ac 100644
--- a/GraphicsFramework/AdvancedRenderingTechniques/res/shaders/Ambient.frag
+++ b/GraphicsFramework/AdvancedRenderingTechniques/res/shaders/Ambient.frag
@@ -12,19 +12,38 @@ layout (binding = 5) uniform HBlock
 
 in vec2 TexCoord;
 
-uniform vec3 Ambient;
-uniform mat4 inverseview;
-uniform sampler2D diffusetex;
-uniform sampler2D normaltex;
-uniform sampler2D speculartex;
-uniform sampler2D worldpostex;
-uniform sampler2D irradiance;
-uniform sampler2D skydome;
-uniform float exposure;
-uniform float contrast;
-uniform bool showDiffuse;
-uniform bool showSpecular;
-uniform sampler2D AOtex;
+layout (binding = 2) uniform GlobalMatrices
+{
+	mat4 mProjection;
+	mat4 mView;
+	mat4 mInvView;
+} Matrices;
+
+layout (binding = 3) uniform ShaderData
+{
+	mat4 ShadowMatrix;
+	vec3 Light;
+	vec3 Ambient;
+	vec3 LightPos;
+	float AOContrast;
+	int AONum;
+	float AORadius;
+	float AOScale;
+	float Exposure;
+	float Contrast;
+	bool ShowIBLDiffuse;
+	bool ShowIBLSpecular;
+	float BiasAlpha;
+	int GBuffershow;
+} Data;
+
+layout (binding = 2) uniform sampler2D normaltex;
+layout (binding = 3) uniform sampler2D worldpostex;
+layout (binding = 4) uniform sampler2D diffusetex;
+layout (binding = 5) uniform sampler2D speculartex;
+layout (binding = 6) uniform sampler2D irradiance;
+layout (binding = 7) uniform sampler2D skydome;
+layout (binding = 8) uniform sampler2D AOtex;
 
 vec3 TexRead(vec3 w,sampler2D tex, float level)
 {
@@ -51,7 +70,7 @@ void main()
 	vec4 worldPosdepth = texture(worldpostex,TexCoord);
 	vec3 worldPos = worldPosdepth.xyz;
 	float depth = worldPosdepth.w;
-	vec3 eyePos = (inverseview * vec4(0,0,0,1)).xyz;
+	vec3 eyePos = (Matrices.mInvView * vec4(0,0,0,1)).xyz;
 	vec3 eyeVec = eyePos - worldPos;
 	vec3 V = normalize(eyeVec);
 	vec3 N = normalize(texture(normaltex,TexCoord).xyz);
@@ -84,17 +103,17 @@ void main()
 
 	vec3 diffuse = IrrAmbient * Kd / pi;
 	vec3 color = vec3(0);
-	if(showDiffuse)
+	if(Data.ShowIBLDiffuse)
 	color += diffuse;
-	if(showSpecular)
+	if(Data.ShowIBLSpecular)
 	color += specular;
 
 	vec4 OutColor = vec4(color,1.0);
 
 	// Tone Mapping and Gamma Correction
-	vec4 base = exposure * OutColor / (exposure * OutColor + vec4(1,1,1,1));
+	vec4 base = Data.Exposure * OutColor / (Data.Exposure * OutColor + vec4(1,1,1,1));
 
-	FragColor = pow(base,vec4(contrast/2.2));
+	FragColor = pow(base,vec4(Data.Contrast/2.2));
 
 	// SSAO
 	//float S = 0.0f;
diff --git a/GraphicsFramework/AdvancedRenderingTechniques/res/shaders/AmbientNoAO.frag b/GraphicsFramework/AdvancedRenderingTechniques/res/shaders/AmbientNoAO.frag
index f4806a6..e31be3a 100644
--- a/GraphicsFramework/AdvancedRenderingTechniques/res/shaders/AmbientNoAO.frag
+++ b/GraphicsFramework/AdvancedRenderingTechniques/res/shaders/AmbientNoAO.frag
@@ -12,18 +12,38 @@ uniform HBlock
 
 in vec2 TexCoord;
 
-uniform vec3 Ambient;
-uniform mat4 inverseview;
-uniform sampler2D diffusetex;
-uniform sampler2D normaltex;
-uniform sampler2D speculartex;
-uniform sampler2D worldpostex;
-uniform sampler2D irradiance;
-uniform sampler2D skydome;
-uniform float exposure;
-uniform float contrast;
-uniform bool showDiffuse;
-uniform bool showSpecular;
+layout (binding = 2) uniform GlobalMatrices
+{
+	mat4 mProjection;
+	mat4 mView;
+	mat4 mInvView;
+} Matrices;
+
+layout (binding = 3) uniform ShaderData
+{
+	mat4 ShadowMatrix;
+	vec3 Light;
+	vec3 Ambient;
+	vec3 LightPos;
+	float AOContrast;
+	int AONum;
+	float AORadius;
+	float AOScale;
+	float Exposure;
+	float Contrast;
+	bool ShowIBLDiffuse;
+	bool ShowIBLSpecular;
+	float BiasAlpha;
+	int GBuffershow;
+} Data;
+
+layout (binding = 2) uniform sampler2D normaltex;
+layout (binding = 3) uniform sampler2D worldpostex;
+layout (binding = 4) uniform sampler2D diffusetex;
+layout (binding = 5) uniform sampler2D speculartex;
+layout (binding = 6) uniform sampler2D irradiance;
+layout (binding = 7) uniform sampler2D skydome;
+layout (binding = 8) uniform sampler2D AOtex;
 
 vec3 TexRead(vec3 w,sampler2D tex, float level)
 {
@@ -50,7 +70,7 @@ void main()
 	vec4 worldPosdepth = texture(worldpostex,TexCoord);
 	vec3 worldPos = worldPosdepth.xyz;
 	float depth = worldPosdepth.w;
-	vec3 eyePos = (inverseview * vec4(0,0,0,1)).xyz;
+	vec3 eyePos = (Matrices.mInvView * vec4(0,0,0,1)).xyz;
 	vec3 eyeVec = eyePos - worldPos;
 	vec3 V = normalize(eyeVec);
 	vec3 N = normalize(texture(normaltex,TexCoord).xyz);
@@ -83,15 +103,15 @@ void main()
 
 	vec3 diffuse = IrrAmbient * Kd / pi;
 	vec3 color = vec3(0);
-	if(showDiffuse)
+	if(Data.ShowIBLDiffuse)
 	color += diffuse;
-	if(showSpecular)
+	if(Data.ShowIBLSpecular)
 	color += specular;
 
 	vec4 OutColor = vec4(color,1.0);
 
 	// Tone Mapping and Gamma Correction
-	vec4 base = exposure * OutColor / (exposure * OutColor + vec4(1,1,1,1));
+	vec4 base = Data.Exposure * OutColor / (Data.Exposure * OutColor + vec4(1,1,1,1));
 
-	FragColor = pow(base,vec4(contrast/2.2));
+	FragColor = pow(base,vec4(Data.Contrast/2.2));
 }
\ No newline at end of file
diff --git a/GraphicsFramework/AdvancedRenderingTechniques/res/shaders/Lighting.frag b/GraphicsFramework/AdvancedRenderingTechniques/res/shaders/Lighting.frag
index fefd56a..8674666 100644
--- a/GraphicsFramework/AdvancedRenderingTechniques/res/shaders/Lighting.frag
+++ b/GraphicsFramework/AdvancedRenderingTechniques/res/shaders/Lighting.frag
@@ -1,4 +1,4 @@
-#version 330 core
+#version 430 core
 
 out vec4 FragColor;
 
@@ -6,11 +6,11 @@ in vec2 TexCoord;
 
 const float pi = 22.0f/7.0f;
 
-uniform sampler2D normaltex;
-uniform sampler2D worldpostex;
-uniform sampler2D diffusetex;
-uniform sampler2D specularalpha;
-uniform sampler2D shadowmap;
+layout (binding = 1) uniform sampler2D normaltex;
+layout (binding = 2) uniform sampler2D worldpostex;
+layout (binding = 3) uniform sampler2D diffusetex;
+layout (binding = 4) uniform sampler2D specularalpha;
+layout (binding = 5) uniform sampler2D shadowmap;
 
 uniform vec3 lightPos;
 uniform vec3 Light;
diff --git a/GraphicsFramework/AdvancedRenderingTechniques/res/shaders/ShadersList.ini b/GraphicsFramework/AdvancedRenderingTechniques/res/shaders/ShadersList.ini
deleted file mode 100644
index e69de29..0000000
diff --git a/GraphicsFramework/AdvancedRenderingTechniques/res/shaders/SkyDome.frag b/GraphicsFramework/AdvancedRenderingTechniques/res/shaders/SkyDome.frag
index 5783d85..612b0b2 100644
--- a/GraphicsFramework/AdvancedRenderingTechniques/res/shaders/SkyDome.frag
+++ b/GraphicsFramework/AdvancedRenderingTechniques/res/shaders/SkyDome.frag
@@ -1,4 +1,4 @@
-#version 330 core
+#version 430 core
 
 out vec4 FragColor;
 
@@ -6,9 +6,24 @@ const float pi = 22.0f/7.0f;
 
 in vec3 fragPos;
 
-uniform sampler2D skyDome;
-uniform float exposure;
-uniform float contrast;
+layout (binding = 1) uniform sampler2D skyDome;
+layout (binding = 3) uniform ShaderData
+{
+	mat4 ShadowMatrix;
+	vec3 Light;
+	vec3 Ambient;
+	vec3 LightPos;
+	float AOContrast;
+	int AONum;
+	float AORadius;
+	float AOScale;
+	float Exposure;
+	float Contrast;
+	bool ShowIBLDiffuse;
+	bool ShowIBLSpecular;
+	float BiasAlpha;
+	int GBuffershow;
+} Data;
 
 void main()
 {
@@ -19,7 +34,7 @@ void main()
 	vec4 OutColor = vec4(texture(skyDome,uv).rgb,1.0);
 
 	// Tone Mapping and Gamma Correction
-	vec4 base = exposure * OutColor / (exposure * OutColor + vec4(1,1,1,1));
+	vec4 base = Data.Exposure * OutColor / (Data.Exposure * OutColor + vec4(1,1,1,1));
 
-	FragColor = pow(base,vec4(contrast/2.2));
+	FragColor = pow(base,vec4(Data.Contrast/2.2));
 }
\ No newline at end of file
diff --git a/GraphicsFramework/AdvancedRenderingTechniques/src/AdvancedRenderingTechniquesApplication.cpp b/GraphicsFramework/AdvancedRenderingTechniques/src/AdvancedRenderingTechniquesApplication.cpp
index b89ef87..fbdeaa9 100644
--- a/GraphicsFramework/AdvancedRenderingTechniques/src/AdvancedRenderingTechniquesApplication.cpp
+++ b/GraphicsFramework/AdvancedRenderingTechniques/src/AdvancedRenderingTechniquesApplication.cpp
@@ -11,12 +11,9 @@ Application* CreateApplication()
 	return new AdvancedRenderingTechniquesApplication();
 }
 
-Settings AdvancedRenderingTechniquesApplication::GetSettings()
+std::string AdvancedRenderingTechniquesApplication::GetSettingsFilePath()
 {
-	Settings settings;
-	settings.mWindowSize = { 1280, 720 };
-	settings.mShadersListPath = "res/Shaders/ShadersList.ini";
-	return settings;
+	return "res/Settings.json";
 }
 
 void AdvancedRenderingTechniquesApplication::Init()
diff --git a/GraphicsFramework/AdvancedRenderingTechniques/src/AdvancedRenderingTechniquesApplication.h b/GraphicsFramework/AdvancedRenderingTechniques/src/AdvancedRenderingTechniquesApplication.h
index e387d31..57a2c37 100644
--- a/GraphicsFramework/AdvancedRenderingTechniques/src/AdvancedRenderingTechniquesApplication.h
+++ b/GraphicsFramework/AdvancedRenderingTechniques/src/AdvancedRenderingTechniquesApplication.h
@@ -6,7 +6,7 @@ class AdvancedRenderingTechniquesApplication : public Application
 {
 public:
 
-	virtual Settings GetSettings() override;
+	virtual std::string GetSettingsFilePath() override;
 
 	virtual void Init() override;
 	virtual void Close() override;
diff --git a/GraphicsFramework/AdvancedRenderingTechniques/src/AllProjects.cpp b/GraphicsFramework/AdvancedRenderingTechniques/src/AllProjects.cpp
index d866d68..2624305 100644
--- a/GraphicsFramework/AdvancedRenderingTechniques/src/AllProjects.cpp
+++ b/GraphicsFramework/AdvancedRenderingTechniques/src/AllProjects.cpp
@@ -27,8 +27,15 @@
 
 struct Matrices
 {
-	glm::mat4 mView;
 	glm::mat4 mProjection;
+	glm::mat4 mView;
+	glm::mat4 mInvView;
+};
+
+struct ShadowMatrices
+{
+	glm::mat4 mLightProjection;
+	glm::mat4 mLightView;
 };
 
 AllProjects::~AllProjects()
@@ -38,25 +45,34 @@ AllProjects::~AllProjects()
 void AllProjects::Init()
 {
 	baseShader = RenderingFactory::Instance()->CreateShader();
-	baseShader->Init("res/shaders/Drawing.vert", "res/shaders/Drawing.frag");
+	baseShader->Init("DRAWING");
 
 	lighting = RenderingFactory::Instance()->CreateShader(); 
-	lighting->Init("res/shaders/Lighting.vert", "res/shaders/Lighting.frag");
+	lighting->Init("LIGHTING");
 
 	ambient = RenderingFactory::Instance()->CreateShader(); 
-	ambient->Init("res/shaders/Ambient.vert", "res/shaders/Ambient.frag");
+	ambient->Init("AMBIENT");
 
 	ambientNoAO = RenderingFactory::Instance()->CreateShader();
-	ambientNoAO->Init("res/shaders/Ambient.vert", "res/shaders/AmbientNoAO.frag");
+	ambientNoAO->Init("AMBIENT_NO_AO");
 
 	shadow = RenderingFactory::Instance()->CreateShader(); 
-	shadow->Init("res/shaders/Shadow.vert", "res/shaders/Shadow.frag");
+	shadow->Init("SHADOW");
 
 	locallight = RenderingFactory::Instance()->CreateShader(); 
-	locallight->Init("res/shaders/LocalLight.vert", "res/shaders/LocalLight.frag");
+	locallight->Init("LOCAL_LIGHT");
 
+	globalMatricesBinding = 2;
 	globalMatrices = RenderingFactory::Instance()->CreateUniformBuffer();
-	globalMatrices->Init(sizeof(Matrices));
+	globalMatrices->Init(sizeof(Matrices), globalMatricesBinding);
+
+	shadowMatricesBinding = 3;
+	shadowMatrices = RenderingFactory::Instance()->CreateUniformBuffer();
+	shadowMatrices->Init(sizeof(ShadowMatrices), shadowMatricesBinding);
+
+	localLightDataBinding = 3;
+	localLightUbo = RenderingFactory::Instance()->CreateUniformBuffer();
+	localLightUbo->Init(sizeof(LocalLightData), localLightDataBinding);
 
 	blurHorizontal = RenderingFactory::Instance()->CreateComputeShader(); 
 	blurHorizontal->SetShader("res/shaders/BlurHorizontal.compute");
@@ -70,23 +86,17 @@ void AllProjects::Init()
 	Engine::Instance()->GetCamera()->mCameraPos = glm::vec3(27.8f, 25.9f, -65.7f);
 	Engine::Instance()->GetCamera()->CalculateFront();
 
-	Renderer::Instance()->BindShader(lighting);
-	lighting->SetUniform3f("Light", 1.0f, 1.0f, 1.0f);
-
-	Renderer::Instance()->BindShader(ambient);
-	ambient->SetUniform3f("Ambient", 0.1f, 0.1f, 0.1f);
-
-	Renderer::Instance()->BindShader(ambientNoAO);
-	ambientNoAO->SetUniform3f("Ambient", 0.1f, 0.1f, 0.1f);
+	ShaderUboData.Light = glm::vec4(1.f, 1.f, 1.f, 1.f);
+	ShaderUboData.Ambient = glm::vec4(0.1f, 0.1f, 0.1f, 1.f);
 
 	showAO = true;
 
 	G_Buffer = RenderingFactory::Instance()->CreateFrameBuffer(); 
-	G_Buffer->Init(Window::Instance()->GetWidth(), Window::Instance()->GetHeight(), 4);
+	G_Buffer->Init(Window::Instance()->GetWidth(), Window::Instance()->GetHeight(), ImageFormat::RGBA32F, 4);
 	ShadowMap = RenderingFactory::Instance()->CreateFrameBuffer(); 
-	ShadowMap->Init(1024, 1024);
+	ShadowMap->Init(1024, 1024, ImageFormat::RGBA32F);
 
-	gBuffershow = 0;
+	ShaderUboData.GBuffershow = 0;
 
 	srand(time(NULL));
 
@@ -116,66 +126,67 @@ void AllProjects::Init()
 	std::cout << "Weights total:" << sum << std::endl;
 
 	block = RenderingFactory::Instance()->CreateUniformBuffer(); 
-	block->Init(MAX_BLUR_WEIGHTS_NUM * sizeof(float));
+	block->Init(MAX_BLUR_WEIGHTS_NUM * sizeof(float), 3);
 
-	biasAlpha = 0.057f;
+	ShaderUboData.BiasAlpha = 0.057f;
 
 	// Shadow blur
 	horizontalBlurred = RenderingFactory::Instance()->CreateTexture();
-	horizontalBlurred->Init(4, ShadowMap->GetWidth(), ShadowMap->GetHeight());
+	horizontalBlurred->Init(ImageFormat::RGBA32F, ShadowMap->GetWidth(), ShadowMap->GetHeight());
 	blurredShadowMap = RenderingFactory::Instance()->CreateTexture(); 
-	blurredShadowMap->Init(4, ShadowMap->GetWidth(), ShadowMap->GetHeight());
+	blurredShadowMap->Init(ImageFormat::RGBA32F, ShadowMap->GetWidth(), ShadowMap->GetHeight());
 
 	//SkyDome shaders
 	skyDomeShader = RenderingFactory::Instance()->CreateShader(); 
-	skyDomeShader->Init("res/shaders/SkyDome.vert", "res/shaders/SkyDome.frag");
+	skyDomeShader->Init("SKYDOME");
 	skyDomeTexture = RenderingFactory::Instance()->CreateTexture(); 
 	skyDomeTexture->Init("res/Textures/popDome.hdr");
 	skyDomeIrradiance = RenderingFactory::Instance()->CreateTexture(); 
 	skyDomeIrradiance->Init("res/Textures/popDomeIrr.hdr");
-	exposure = 5.2f;
-	contrast = 1.0f;
+	ShaderUboData.Exposure = 5.2f;
+	ShaderUboData.Contrast = 1.0f;
 
 	// IBL
 	Hblock.N = HBlockSize;
 	HammersleyRandomPoints();
 	HUniBlock = RenderingFactory::Instance()->CreateUniformBuffer(); 
-	HUniBlock->Init(sizeof(Hblock));
+	HUniBlock->Init(sizeof(Hblock), 3);
 	HUniBlock->AddData(sizeof(Hblock), &Hblock);
-	IBLDiffuse = true;
-	IBLSpecular = true;
+	ShaderUboData.ShowIBLDiffuse = true;
+	ShaderUboData.ShowIBLSpecular = true;
 
 	//SSAO
 	AOShader = RenderingFactory::Instance()->CreateShader(); 
-	AOShader->Init("res/shaders/AO.vert", "res/shaders/AO.frag");
+	AOShader->Init("AMBIENT_OCCLUSION");
 	BlurredAO = RenderingFactory::Instance()->CreateFrameBuffer(); 
-	BlurredAO->Init(Window::Instance()->GetWidth(), Window::Instance()->GetHeight());
+	BlurredAO->Init(Window::Instance()->GetWidth(), Window::Instance()->GetHeight(), ImageFormat::RGBA32F);
 	BilateralHorizontal = RenderingFactory::Instance()->CreateComputeShader(); 
 	BilateralHorizontal->SetShader("res/shaders/BilateralHorizontal.compute");
 	BilateralVertical = RenderingFactory::Instance()->CreateComputeShader(); 
 	BilateralVertical->SetShader("res/shaders/BilateralVertical.compute");
 	HorizontalBlurredAO = RenderingFactory::Instance()->CreateTexture(); 
-	HorizontalBlurredAO->Init(4, Window::Instance()->GetWidth(), Window::Instance()->GetHeight());
+	HorizontalBlurredAO->Init(ImageFormat::RGBA32F, Window::Instance()->GetWidth(), Window::Instance()->GetHeight());
 	ResultBlurredAO = RenderingFactory::Instance()->CreateTexture(); 
-	ResultBlurredAO->Init(4, Window::Instance()->GetWidth(), Window::Instance()->GetHeight());
-	AONum = 115;
-	AORadius = 10.0f;
-	AOScale = 3.0f;
-	AOContrast = 1.0f;
+	ResultBlurredAO->Init(ImageFormat::RGBA32F, Window::Instance()->GetWidth(), Window::Instance()->GetHeight());
+
+	ShaderUboData.AONum = 115;
+	ShaderUboData.AORadius = 10.0f;
+	ShaderUboData.AOScale = 3.0f;
+	ShaderUboData.AOContrast = 1.0f;
 
 	// Load Objects in Scene
 	ObjectManager::Instance()->AddObject("res/JSON Data/Floor.json");
-	ObjectManager::Instance()->AddObject("res/JSON Data/Teapot1.json");
+	/*ObjectManager::Instance()->AddObject("res/JSON Data/Teapot1.json");
 	ObjectManager::Instance()->AddObject("res/JSON Data/Teapot2.json");
 	ObjectManager::Instance()->AddObject("res/JSON Data/Teapot3.json");
 	ObjectManager::Instance()->AddObject("res/JSON Data/Teapot4.json");
 	ObjectManager::Instance()->AddObject("res/JSON Data/Teapot5.json");
 	ObjectManager::Instance()->AddObject("res/JSON Data/Teapot6.json");
 	ObjectManager::Instance()->AddObject("res/JSON Data/Teapot7.json");
-	ObjectManager::Instance()->AddObject("res/JSON Data/Teapot8.json");
+	ObjectManager::Instance()->AddObject("res/JSON Data/Teapot8.json");*/
 	//ObjectManager::Instance().AddObject("res/JSON Data/Teapot9.json");
-	skyDome = ObjectManager::Instance()->ReadObject("res/JSON Data/SkyDome.json");
-	skyDome->GetComponent<Transform>()->mModelTransformation = glm::scale(glm::mat4(1.0f), skyDome->GetComponent<Transform>()->mScale);
+	//skyDome = ObjectManager::Instance()->ReadObject("res/JSON Data/SkyDome.json");
+	//skyDome->GetComponent<Transform>()->mModelTransformation = glm::scale(glm::mat4(1.0f), skyDome->GetComponent<Transform>()->mScale);
 	showLocalLights = true;
 }
 
@@ -188,6 +199,8 @@ void AllProjects::Close()
 	delete shadow;
 	delete locallight;
 	delete globalMatrices;
+	delete shadowMatrices;
+	delete localLightUbo;
 	delete blurHorizontal;
 	delete blurVertical;
 	delete light;
@@ -242,9 +255,12 @@ void AllProjects::Update()
 	G_Buffer->Clear();
 	pRenderer->BindShader(baseShader);
 
-	Matrices MatData{ Engine::Instance()->GetCamera()->mView , Engine::Instance()->GetCamera()->mProjection };
+	Matrices MatData{ 
+		Engine::Instance()->GetCamera()->mProjection,
+		Engine::Instance()->GetCamera()->mView, 
+		glm::inverse(Engine::Instance()->GetCamera()->mView) };
 	globalMatrices->AddData(sizeof(MatData), &MatData);
-	pRenderer->BindUniformBuffer(globalMatrices, 0);
+	pRenderer->BindUniformBuffer(globalMatrices, globalMatricesBinding);
 
 	ObjectManager::Instance()->RenderObjects(baseShader);
 
@@ -257,15 +273,15 @@ void AllProjects::Update()
 	ShadowMap->Clear();
 	pRenderer->BindShader(shadow);
 
-	glm::mat4 LightLookAt, shadowMatrix, LightProj;
+	glm::mat4 LightLookAt, LightProj;
 	LightLookAt = glm::lookAt(light->position, glm::vec3(0.0f,0.0f,0.0f), glm::vec3(0.0f, 1.0f, 0.0f));
 	LightProj = glm::perspective(glm::radians(45.0f), 1.0f, 0.1f, 2000.0f);
 
-	Matrices ShadowMatricesData{ LightLookAt , LightProj };
-	globalMatrices->AddData(sizeof(ShadowMatricesData), &ShadowMatricesData);
-	pRenderer->BindUniformBuffer(globalMatrices, 0);
+	ShadowMatrices ShadowMatricesData{ LightProj, LightLookAt };
+	shadowMatrices->AddData(sizeof(ShadowMatricesData), &ShadowMatricesData);
+	pRenderer->BindUniformBuffer(shadowMatrices, shadowMatricesBinding);
 
-	shadowMatrix = glm::translate(glm::mat4(1.0f), glm::vec3(0.5f)) * glm::scale(glm::mat4(1.0f), glm::vec3(0.5f)) * LightProj * LightLookAt;
+	ShaderUboData.ShadowMatrix = glm::translate(glm::mat4(1.0f), glm::vec3(0.5f)) * glm::scale(glm::mat4(1.0f), glm::vec3(0.5f)) * LightProj * LightLookAt;
 
 	ObjectManager::Instance()->RenderObjects(shadow);
 
@@ -318,14 +334,10 @@ void AllProjects::Update()
 	BlurredAO->Clear();
 
 	pRenderer->BindShader(AOShader);
-	G_Buffer->TexBind(0, 2);
-	AOShader->SetUniform1i("normaltex", 2);
-	G_Buffer->TexBind(1, 3);
-	AOShader->SetUniform1i("worldpostex", 3);
-	AOShader->SetUniform1f("contrast", AOContrast);
-	AOShader->SetUniform1i("AOn", AONum);
-	AOShader->SetUniform1f("AOR", AORadius);
-	AOShader->SetUniform1f("AOscale", AOScale);
+	pRenderer->BindTexture(G_Buffer->GetTexture(0), 2);
+	pRenderer->BindTexture(G_Buffer->GetTexture(1), 3);
+		
+	pRenderer->BindUniformBuffer(ShaderUbo, ShaderUboBinding);
 	Renderer::Instance()->DrawQuad(AOShader);
 	pRenderer->UnbindShader(AOShader);
 
@@ -368,46 +380,37 @@ void AllProjects::Update()
 
 	Shader* ambientShader = showAO ? ambient : ambientNoAO;
 	pRenderer->BindShader(ambientShader);
-	G_Buffer->TexBind(0, 2);
-	ambientShader->SetUniform1i("normaltex", 2);
-	G_Buffer->TexBind(1, 3);
-	ambientShader->SetUniform1i("worldpostex", 3);
-	G_Buffer->TexBind(2, 4);
-	ambientShader->SetUniform1i("diffusetex", 4);
-	G_Buffer->TexBind(3, 5);
-	ambientShader->SetUniform1i("speculartex", 5);
+	pRenderer->BindTexture(G_Buffer->GetTexture(0), 2);
+	pRenderer->BindTexture(G_Buffer->GetTexture(1), 3);
+	pRenderer->BindTexture(G_Buffer->GetTexture(2), 4);
+	pRenderer->BindTexture(G_Buffer->GetTexture(3), 5);	
 	pRenderer->BindTexture(skyDomeIrradiance, 6);
-	ambientShader->SetUniform1i("irradiance", 6);
 	pRenderer->BindTexture(skyDomeTexture, 7);
-	ambientShader->SetUniform1i("skydome", 7);
 
 	if (showAO)
 	{
 		pRenderer->BindTexture(ResultBlurredAO, 8);
-		//BlurredAO->TexBind(0, 8);
-		ambientShader->SetUniform1i("AOtex", 8);
 	}
-	ambientShader->SetUniform1f("exposure", exposure);
-	ambientShader->SetUniform1f("contrast", contrast);
-	ambientShader->SetUniform1i("showDiffuse", IBLDiffuse);
-	ambientShader->SetUniform1i("showSpecular", IBLSpecular);
-	ambientShader->SetUniformMat4f("inverseview", glm::inverse(Engine::Instance()->GetCamera()->mView));
+	pRenderer->BindUniformBuffer(ShaderUbo, ShaderUboBinding);
+	pRenderer->BindUniformBuffer(globalMatrices, globalMatricesBinding);
 	Renderer::Instance()->BindUniformBuffer(HUniBlock, 5);
 	Renderer::Instance()->DrawQuad(ambientShader);
 	Renderer::Instance()->UnbindUniformBuffer(HUniBlock);
 	pRenderer->UnbindShader(ambientShader);
+	pRenderer->UnbindUniformBuffer(ShaderUbo);
+	pRenderer->UnbindUniformBuffer(globalMatrices);
 
-	G_Buffer->TexUnbind(0, 2);
-	G_Buffer->TexUnbind(1, 3);
-	G_Buffer->TexUnbind(2, 4);
-	G_Buffer->TexUnbind(3, 5);
+	pRenderer->UnbindTexture(G_Buffer->GetTexture(0), 2);
+	pRenderer->UnbindTexture(G_Buffer->GetTexture(1), 3);
+	pRenderer->UnbindTexture(G_Buffer->GetTexture(2), 4);
+	pRenderer->UnbindTexture(G_Buffer->GetTexture(3), 5);
 	pRenderer->UnbindTexture(skyDomeIrradiance, 6);
 	pRenderer->UnbindTexture(skyDomeTexture, 7);
 	//BlurredAO->TexUnbind(0, 8);
 	pRenderer->UnbindTexture(ResultBlurredAO, 8);
 
 	// Global Lighting pass
-	if (gBuffershow == 0)
+	if (ShaderUboData.GBuffershow == 0)
 	{
 		pRenderer->SetBlending(true);
 	}
@@ -415,14 +418,10 @@ void AllProjects::Update()
 	if (lighton)
 	{
 		pRenderer->BindShader(lighting);
-		G_Buffer->TexBind(0, 1);
-		lighting->SetUniform1i("normaltex", 1);
-		G_Buffer->TexBind(1, 2);
-		lighting->SetUniform1i("worldpostex", 2);
-		G_Buffer->TexBind(2, 3);
-		lighting->SetUniform1i("diffusetex", 3);
-		G_Buffer->TexBind(3, 4);
-		lighting->SetUniform1i("specularalpha", 4);
+		pRenderer->BindTexture(G_Buffer->GetTexture(0), 1);
+		pRenderer->BindTexture(G_Buffer->GetTexture(1), 2);
+		pRenderer->BindTexture(G_Buffer->GetTexture(2), 3);
+		pRenderer->BindTexture(G_Buffer->GetTexture(3), 4);
 		if (softShadows)
 		{
 			pRenderer->BindTexture(blurredShadowMap, 5);
@@ -431,38 +430,30 @@ void AllProjects::Update()
 		{
 			pRenderer->BindTexture(ShadowMap->GetTexture(), 5);
 		}
-		lighting->SetUniform1i("shadowmap", 5);
-		lighting->SetUniformMat4f("shadowmat", shadowMatrix);
-		lighting->SetUniform1f("biasAlpha", biasAlpha);
-		lighting->SetUniform1f("exposure", exposure);
-		lighting->SetUniform1f("contrast", contrast);
-
-		lighting->SetUniform3f("lightPos", light->position.x, light->position.y, light->position.z);
-		lighting->SetUniformMat4f("inverseview", glm::inverse(Engine::Instance()->GetCamera()->mView));
-		lighting->SetUniform1i("GBufferShow", gBuffershow);
+		pRenderer->BindUniformBuffer(ShaderUbo, ShaderUboBinding);
+		ShaderUboData.LightPos = glm::vec3(light->position.x, light->position.y, light->position.z);
+		
 		Renderer::Instance()->DrawQuad(lighting);
 		pRenderer->UnbindShader(lighting);
 	}
 
 	// Local Lighting pass
-	if (gBuffershow == 0 && showLocalLights)
+	if (ShaderUboData.GBuffershow == 0 && showLocalLights)
 	{
 		pRenderer->SetCullingFace(CullFace::Front);
 
 		pRenderer->BindShader(locallight);
-		locallight->SetUniformMat4f("view", Engine::Instance()->GetCamera()->mView);
-		locallight->SetUniformMat4f("projection", Engine::Instance()->GetCamera()->mProjection);
-		G_Buffer->TexBind(0, 1);
-		locallight->SetUniform1i("normaltex", 1);
-		G_Buffer->TexBind(1, 2);
-		locallight->SetUniform1i("worldpostex", 2);
-		G_Buffer->TexBind(2, 3);
-		locallight->SetUniform1i("diffusetex", 3);
-		G_Buffer->TexBind(3, 4);
-		locallight->SetUniform1i("specularalpha", 4);
-		locallight->SetUniformMat4f("inverseview", glm::inverse(Engine::Instance()->GetCamera()->mView));
+		pRenderer->BindUniformBuffer(globalMatrices, globalMatricesBinding);
+		pRenderer->BindTexture(G_Buffer->GetTexture(0), 1);
+		pRenderer->BindTexture(G_Buffer->GetTexture(1), 2);
+		pRenderer->BindTexture(G_Buffer->GetTexture(2), 3);
+		pRenderer->BindTexture(G_Buffer->GetTexture(3), 4);
+
+		pRenderer->BindUniformBuffer(ShaderUbo, ShaderUboBinding);
+		pRenderer->BindUniformBuffer(localLightUbo, localLightDataBinding);
 		float lightRadius = 4.0f;
-		locallight->SetUniform1f("lightRadius", lightRadius);
+		LocalLightData LightData;
+		LightData.LightRadius = lightRadius;
 		for (unsigned int i = 0; i < 40; ++i)
 		{
 			for (unsigned int j = 0; j < 40; ++j)
@@ -470,13 +461,19 @@ void AllProjects::Update()
 				glm::mat4 model = glm::mat4(1.0f);
 				model = glm::translate(model, glm::vec3(i * lightRadius * 2 - 40.0f * lightRadius, lightRadius / 2, j * lightRadius * 2 - 40.0f * lightRadius));
 				model = glm::scale(model, glm::vec3(lightRadius));
-				locallight->SetUniform3f("lightPos", i * lightRadius * 2 - 40.0f * lightRadius, lightRadius / 2, j * lightRadius * 2 - 40.0f * lightRadius);
-				locallight->SetUniformMat4f("model", model);
-				locallight->SetUniform3f("Light", lightColors[i][j].x, lightColors[i][j].y, lightColors[i][j].z);				
+
+				LightData.LightPos = glm::vec3(i * lightRadius * 2 - 40.0f * lightRadius, lightRadius / 2, j* lightRadius * 2 - 40.0f * lightRadius);
+				LightData.LightModelMatrix = model;
+				LightData.LightValue = glm::vec3(lightColors[i][j].x, lightColors[i][j].y, lightColors[i][j].z);
+
+				localLightUbo->AddData(sizeof(LightData), &LightData);
+
 				ShapeData& shape = ShapeManager::Instance()->mShapes[Shapes::SPHERE];
 				Renderer::Instance()->Draw(shape.mVBO, shape.mIBO, locallight);
 			}
 		}
+		pRenderer->UnbindUniformBuffer(localLightUbo);
+		pRenderer->UnbindUniformBuffer(ShaderUbo);
 	}
 
 	pRenderer->SetCullingFace(CullFace::None);
@@ -488,15 +485,17 @@ void AllProjects::Update()
 
 	// Forward render Skydome
 	pRenderer->BindShader(skyDomeShader);
-	skyDomeShader->SetUniformMat4f("view", Engine::Instance()->GetCamera()->mView);
-	skyDomeShader->SetUniformMat4f("projection", Engine::Instance()->GetCamera()->mProjection);
-	skyDomeShader->SetUniformMat4f("model", skyDome->GetComponent<Transform>()->mModelTransformation);
+	pRenderer->BindUniformBuffer(globalMatrices, globalMatricesBinding);
+	Transform* skyDomeTr = skyDome->GetComponent<Transform>();
+	skyDomeTr->Update();
+	pRenderer->BindUniformBuffer(skyDomeTr->mMatricesUBO,
+								 skyDomeTr->mMatricesUBO->GetBinding());
 	pRenderer->BindTexture(skyDomeTexture, 1);
-	skyDomeShader->SetUniform1i("skyDome", 1);
-	skyDomeShader->SetUniform1f("exposure", exposure);
-	skyDomeShader->SetUniform1f("contrast", contrast);
+	pRenderer->BindUniformBuffer(ShaderUbo, ShaderUboBinding);
 	Renderer::Instance()->Draw(skyDome->GetComponent<Shape>()->mShapeData->mVBO, skyDome->GetComponent<Shape>()->mShapeData->mIBO, skyDomeShader);
 	pRenderer->UnbindShader(skyDomeShader);
+	pRenderer->UnbindUniformBuffer(globalMatrices);
+	pRenderer->UnbindUniformBuffer(ShaderUbo);
 	Engine::Instance()->stopMoving = true;
 }
 
@@ -517,18 +516,18 @@ void AllProjects::DebugDisplay()
 	};
 
 	bool selected = true;
-	if (ImGui::BeginCombo("Select G-Buffer", bufferList[gBuffershow]))
+	if (ImGui::BeginCombo("Select G-Buffer", bufferList[ShaderUboData.GBuffershow]))
 	{
 		lighton = true;
 		for (int i = 0; i < ARRAY_SIZE(bufferList); ++i)
 		{
 			if (ImGui::Selectable(bufferList[i], selected))
-				gBuffershow = i;
+				ShaderUboData.GBuffershow = i;
 		}
 		ImGui::EndCombo();
 	}
 	ImGui::DragFloat3("Light Position", &light->position[0], 2.0f, -300.0f, 300.0f);
-	ImGui::InputFloat("biasAlpha", &biasAlpha, 0.0005);
+	ImGui::InputFloat("biasAlpha", &ShaderUboData.BiasAlpha, 0.0005);
 	if (ImGui::SliderInt("BlurSize", &blurSize, 2, MAX_BLUR_WEIGHTS_NUM / 2))
 	{
 		int s = blurSize / 2;
@@ -540,24 +539,24 @@ void AllProjects::DebugDisplay()
 			blurWeights.emplace_back(w);
 		}
 	}
-	ImGui::InputFloat("Exposure", &exposure, 0.2);
-	ImGui::InputFloat("Contrast", &contrast, 0.2);
+	ImGui::InputFloat("Exposure", &ShaderUboData.Exposure, 0.2);
+	ImGui::InputFloat("Contrast", &ShaderUboData.Contrast, 0.2);
 	ImGui::Checkbox("Pause Moving", &Engine::Instance()->stopMoving);
-	ImGui::Checkbox("Show IBL Diffuse", &IBLDiffuse);
-	ImGui::Checkbox("Show IBL Specular", &IBLSpecular);
-	ImGui::InputInt("AONum", &AONum);
-	ImGui::InputFloat("AORadius", &AORadius, 1.0f);
-	ImGui::InputFloat("AOScale", &AOScale, 0.1f);
-	ImGui::InputFloat("AOContrast", &AOContrast, 0.1f);
+	ImGui::Checkbox("Show IBL Diffuse", &ShaderUboData.ShowIBLDiffuse);
+	ImGui::Checkbox("Show IBL Specular", &ShaderUboData.ShowIBLSpecular);
+	ImGui::InputInt("AONum", &ShaderUboData.AONum);
+	ImGui::InputFloat("AORadius", &ShaderUboData.AORadius, 1.0f);
+	ImGui::InputFloat("AOScale", &ShaderUboData.AOScale, 0.1f);
+	ImGui::InputFloat("AOContrast", &ShaderUboData.AOContrast, 0.1f);
 	ImGui::End();
 }
 
 void AllProjects::RenderObject(Object* object, Shader* shader)
 {
 	Transform* transform = object->GetComponent<Transform>();
-	if (transform)
+	if (transform && transform->mMatricesUBO)
 	{
-		Renderer::Instance()->BindUniformBuffer(transform->mMatricesUBO, 1);
+		Renderer::Instance()->BindUniformBuffer(transform->mMatricesUBO, 0);
 	}
 
 	Material* material = object->GetComponent<Material>();
@@ -567,7 +566,10 @@ void AllProjects::RenderObject(Object* object, Shader* shader)
 		{
 			Renderer::Instance()->BindTexture(material->pTexture, 8);
 		}
-		Renderer::Instance()->BindUniformBuffer(material->mMaterialUBO, 3);
+		if (material->mMaterialUBO)
+		{
+			Renderer::Instance()->BindUniformBuffer(material->mMaterialUBO, 1);
+		}
 	}
 
 	Shape* shape = object->GetComponent<Shape>();
diff --git a/GraphicsFramework/AdvancedRenderingTechniques/src/AllProjects.h b/GraphicsFramework/AdvancedRenderingTechniques/src/AllProjects.h
index 2e81645..64b246e 100644
--- a/GraphicsFramework/AdvancedRenderingTechniques/src/AllProjects.h
+++ b/GraphicsFramework/AdvancedRenderingTechniques/src/AllProjects.h
@@ -1,5 +1,6 @@
 #include <Core/Scene.h>
 #include <vector>
+#define GLM_FORCE_DEFAULT_ALIGNED_GENTYPES
 #include <glm/glm.hpp>
 
 #define HBlockSize 30
@@ -12,6 +13,32 @@ class Light;
 class Object;
 class Texture;
 
+struct ShaderData
+{
+	glm::mat4 ShadowMatrix;
+	glm::vec3 Light;
+	glm::vec3 Ambient;
+	glm::vec3 LightPos;
+	float AOContrast;
+	int32_t AONum;
+	float AORadius;
+	float AOScale;
+	float Exposure;
+	float Contrast;
+	bool ShowIBLDiffuse;
+	bool ShowIBLSpecular;
+	float BiasAlpha;
+	uint32_t GBuffershow;
+};
+
+struct LocalLightData
+{
+	glm::mat4 LightModelMatrix;
+	glm::vec3 LightPos;
+	glm::vec3 LightValue;
+	float LightRadius;
+};
+
 class AllProjects : public Scene
 {
 public:
@@ -30,9 +57,16 @@ private:
 	Shader* lighting;
 	Shader* locallight;
 	Shader* shadow;
+
+	// Ubos
+	uint32_t globalMatricesBinding;
 	UniformBuffer* globalMatrices;
+	uint32_t shadowMatricesBinding;
+	UniformBuffer* shadowMatrices;
+	uint32_t localLightDataBinding;
+	UniformBuffer* localLightUbo;
 
-	// AO
+	// Ambient
 	Shader* ambient;
 	Shader* ambientNoAO;
 	bool showAO;
@@ -43,7 +77,6 @@ private:
 	int blurSize;
 	std::vector<float> blurWeights;
 	UniformBuffer* block;
-	float biasAlpha;
 
 	//Blur NormalShader
 	Shader* blurShader;
@@ -60,7 +93,6 @@ private:
 	 */
 	FrameBuffer* G_Buffer;
 	FrameBuffer* ShadowMap;
-	int gBuffershow;
 	bool showLocalLights;
 	float angle;
 	glm::vec3 lightColors[40][40];
@@ -73,15 +105,12 @@ private:
 	Shader* skyDomeShader;
 	Texture* skyDomeTexture;
 	Texture* skyDomeIrradiance;
-	float exposure;
-	float contrast;
 	struct
 	{
 		float N;
 		float hammersley[2 * 100];
 	} Hblock;
 	UniformBuffer* HUniBlock;
-	bool IBLDiffuse, IBLSpecular;
 
 	//SSAO
 	Shader* AOShader;
@@ -90,8 +119,9 @@ private:
 	ComputeShader* BilateralVertical;
 	Texture* HorizontalBlurredAO;
 	Texture* ResultBlurredAO;
-	int AONum;
-	float AORadius;
-	float AOScale;
-	float AOContrast;
+
+	// Params
+	ShaderData ShaderUboData;
+	uint32_t ShaderUboBinding;
+	UniformBuffer* ShaderUbo;
 };
\ No newline at end of file
diff --git a/GraphicsFramework/AdvancedRenderingTechniques/src/MotionBlur.cpp b/GraphicsFramework/AdvancedRenderingTechniques/src/MotionBlur.cpp
index 00613d5..a03f623 100644
--- a/GraphicsFramework/AdvancedRenderingTechniques/src/MotionBlur.cpp
+++ b/GraphicsFramework/AdvancedRenderingTechniques/src/MotionBlur.cpp
@@ -34,13 +34,13 @@ MotionBlur::~MotionBlur()
 void MotionBlur::Init()
 {
 	baseShader = RenderingFactory::Instance()->CreateShader();
-	baseShader->Init("res/motionblur/GBuffer.vert", "res/motionblur/GBuffer.frag");
+	baseShader->Init("GBUFFER");
 
 	lighting = RenderingFactory::Instance()->CreateShader(); 
-	lighting->Init("res/motionblur/Lighting.vert", "res/motionblur/Lighting.frag");
+	lighting->Init("MOTIONBLUR_LIGHTING");
 
 	ambient = RenderingFactory::Instance()->CreateShader(); 
-	ambient->Init("res/motionblur/Ambient.vert", "res/motionblur/Ambient.frag");
+	ambient->Init("MOTIONBLUR_AMBIENT");
 
 	light = new Light(glm::vec3(100.0f, 200.0f, 10.0f));
 
@@ -51,25 +51,25 @@ void MotionBlur::Init()
 	Engine::Instance()->GetCamera()->CalculateFront();
 
 	Renderer::Instance()->BindShader(lighting);
-	lighting->SetUniform3f("Light", 3.2f, 3.2f, 3.2f);
+	//lighting->SetUniform3f("Light", 3.2f, 3.2f, 3.2f);
 
 	Renderer::Instance()->BindShader(ambient);
-	ambient->SetUniform3f("Ambient", 0.1f, 0.1f, 0.1f);
+	//ambient->SetUniform3f("Ambient", 0.1f, 0.1f, 0.1f);
 
 	G_Buffer = RenderingFactory::Instance()->CreateFrameBuffer(); 
-	G_Buffer->Init(Window::Instance()->GetWidth(), Window::Instance()->GetHeight(), 5);
+	G_Buffer->Init(Window::Instance()->GetWidth(), Window::Instance()->GetHeight(), ImageFormat::RGBA32F, 5);
 
 	Color = RenderingFactory::Instance()->CreateFrameBuffer(); 
-	Color->Init(Window::Instance()->GetWidth(), Window::Instance()->GetHeight());
+	Color->Init(Window::Instance()->GetWidth(), Window::Instance()->GetHeight(), ImageFormat::RGBA32F);
 
 	gBuffershow = 0;
 
 	globalMatrices = RenderingFactory::Instance()->CreateUniformBuffer();
-	globalMatrices->Init(sizeof(Matrices));
+	globalMatrices->Init(sizeof(Matrices), 2);
 
 	//SkyDome shaders
 	skyDomeShader = RenderingFactory::Instance()->CreateShader(); 
-	skyDomeShader->Init("res/shaders/SkyDome.vert", "res/shaders/SkyDome.frag");
+	skyDomeShader->Init("SKYDOME");
 
 	skyDomeTexture = RenderingFactory::Instance()->CreateTexture(); 
 	skyDomeTexture->Init("res/Textures/popDome.hdr");
@@ -91,20 +91,20 @@ void MotionBlur::Init()
 	k = 20;
 	S = 15;
 	TileMax = RenderingFactory::Instance()->CreateFrameBuffer(); 
-	TileMax->Init(Window::Instance()->GetWidth() / k, Window::Instance()->GetHeight() / k);
+	TileMax->Init(Window::Instance()->GetWidth() / k, Window::Instance()->GetHeight() / k, ImageFormat::RGBA32F);
 	NeighbourMax = RenderingFactory::Instance()->CreateFrameBuffer(); 
-	NeighbourMax->Init(Window::Instance()->GetWidth() / k, Window::Instance()->GetHeight() / k);
+	NeighbourMax->Init(Window::Instance()->GetWidth() / k, Window::Instance()->GetHeight() / k, ImageFormat::RGBA32F);
 
 	TileMaxShader = RenderingFactory::Instance()->CreateShader(); 
-	TileMaxShader->Init("res/motionblur/TileMax.vert", "res/motionblur/TileMax.frag");
+	TileMaxShader->Init("TILE_MAX");
 	NeighbourMaxShader = RenderingFactory::Instance()->CreateShader(); 
-	NeighbourMaxShader->Init("res/motionblur/NeighbourMax.vert", "res/motionblur/NeighbourMax.frag");
+	NeighbourMaxShader->Init("NEIGHBOUR_MAX");
 
 	ReconstructionShader = RenderingFactory::Instance()->CreateShader(); 
-	ReconstructionShader->Init("res/motionblur/Reconstruction.vert", "res/motionblur/Reconstruction.frag");
+	ReconstructionShader->Init("RECONSTRUCTION");
 	MotionBlurOn = true;
 	MotionBlurShader = RenderingFactory::Instance()->CreateShader(); 
-	MotionBlurShader->Init("res/motionblur/MotionBlur.vert", "res/motionblur/MotionBlur.frag");
+	MotionBlurShader->Init("MOTIONBLUR");
 	ReconBlur = false;
 	PerPixel = true;
 
@@ -154,8 +154,8 @@ void MotionBlur::Update()
 
 	Matrices MatData{ Engine::Instance()->GetCamera()->mView, Engine::Instance()->GetCamera()->mProjection, Engine::Instance()->GetCamera()->mPrevView };
 	globalMatrices->AddData(sizeof(MatData), &MatData);
-	baseShader->SetUniform1f("deltaTime", Time::Instance()->deltaTime);
-	baseShader->SetUniform1i("k", k);
+	//baseShader->SetUniform1f("deltaTime", Time::Instance()->deltaTime);
+	//baseShader->SetUniform1i("k", k);
 
 	pRenderer->BindUniformBuffer(globalMatrices, 0);
 	ObjectManager::Instance()->RenderObjects(baseShader);
@@ -182,7 +182,7 @@ void MotionBlur::Update()
 
 	pRenderer->BindShader(ambient);
 	G_Buffer->TexBind(2, 3);
-	ambient->SetUniform1i("diffusetex", 3);
+	//ambient->SetUniform1i("diffusetex", 3);
 	Renderer::Instance()->DrawQuad(ambient);
 	pRenderer->UnbindShader(ambient);
 
@@ -190,19 +190,19 @@ void MotionBlur::Update()
 	// Global Lighting pass	
 	pRenderer->BindShader(lighting);
 	G_Buffer->TexBind(0, 1);
-	lighting->SetUniform1i("normaltex", 1);
+	//lighting->SetUniform1i("normaltex", 1);
 	G_Buffer->TexBind(1, 2);
-	lighting->SetUniform1i("worldpostex", 2);
+	//lighting->SetUniform1i("worldpostex", 2);
 	G_Buffer->TexBind(2, 3);
-	lighting->SetUniform1i("diffusetex", 3);
+	//lighting->SetUniform1i("diffusetex", 3);
 	G_Buffer->TexBind(3, 4);
-	lighting->SetUniform1i("specularalpha", 4);
-	lighting->SetUniform1f("exposure", exposure);
-	lighting->SetUniform1f("contrast", contrast);
+	//lighting->SetUniform1i("specularalpha", 4);
+	//lighting->SetUniform1f("exposure", exposure);
+	//lighting->SetUniform1f("contrast", contrast);
 
-	lighting->SetUniform3f("lightPos", light->position.x, light->position.y, light->position.z);
-	lighting->SetUniformMat4f("inverseview", glm::inverse(Engine::Instance()->GetCamera()->mView));
-	lighting->SetUniform1i("GBufferShow", gBuffershow);
+	//lighting->SetUniform3f("lightPos", light->position.x, light->position.y, light->position.z);
+	//lighting->SetUniformMat4f("inverseview", glm::inverse(Engine::Instance()->GetCamera()->mView));
+	//lighting->SetUniform1i("GBufferShow", gBuffershow);
 	Renderer::Instance()->DrawQuad(lighting);
 	pRenderer->UnbindShader(lighting);
 
@@ -224,13 +224,13 @@ void MotionBlur::Update()
 
 	// Forward render Skydome
 	pRenderer->BindShader(skyDomeShader);
-	skyDomeShader->SetUniformMat4f("view", Engine::Instance()->GetCamera()->mView);
-	skyDomeShader->SetUniformMat4f("projection", Engine::Instance()->GetCamera()->mProjection);
-	skyDomeShader->SetUniformMat4f("model", skyDome->GetComponent<Transform>()->mModelTransformation);
-	pRenderer->BindTexture(skyDomeTexture, 1);
-	skyDomeShader->SetUniform1i("skyDome", 1);
-	skyDomeShader->SetUniform1f("exposure", exposure);
-	skyDomeShader->SetUniform1f("contrast", contrast);
+	//skyDomeShader->SetUniformMat4f("view", Engine::Instance()->GetCamera()->mView);
+	//skyDomeShader->SetUniformMat4f("projection", Engine::Instance()->GetCamera()->mProjection);
+	//skyDomeShader->SetUniformMat4f("model", skyDome->GetComponent<Transform>()->mModelTransformation);
+	//pRenderer->BindTexture(skyDomeTexture, 1);
+	//skyDomeShader->SetUniform1i("skyDome", 1);
+	//skyDomeShader->SetUniform1f("exposure", exposure);
+	//skyDomeShader->SetUniform1f("contrast", contrast);
 	Renderer::Instance()->Draw(skyDome->GetComponent<Shape>()->mShapeData->mVBO, skyDome->GetComponent<Shape>()->mShapeData->mIBO, skyDomeShader);
 	pRenderer->UnbindShader(skyDomeShader);
 	//Engine::Instance().stopMoving = true;
@@ -243,10 +243,10 @@ void MotionBlur::Update()
 
 		pRenderer->BindShader(MotionBlurShader);
 		Color->TexBind(0, 1);
-		MotionBlurShader->SetUniform1i("Color", 1);
-		G_Buffer->TexBind(4, 2);
-		MotionBlurShader->SetUniform1i("Velocity", 2);
-		MotionBlurShader->SetUniform1i("S", S);
+		//MotionBlurShader->SetUniform1i("Color", 1);
+		//G_Buffer->TexBind(4, 2);
+		//MotionBlurShader->SetUniform1i("Velocity", 2);
+		//MotionBlurShader->SetUniform1i("S", S);
 		Renderer::Instance()->DrawQuad(MotionBlurShader);
 
 		pRenderer->UnbindShader(MotionBlurShader);
diff --git a/GraphicsFramework/GraphicsFramework/GraphicsFramework.vcxproj b/GraphicsFramework/GraphicsFramework/GraphicsFramework.vcxproj
index fe2749d..8435efa 100644
--- a/GraphicsFramework/GraphicsFramework/GraphicsFramework.vcxproj
+++ b/GraphicsFramework/GraphicsFramework/GraphicsFramework.vcxproj
@@ -360,8 +360,18 @@ copy /y "DLLs\*.dll" "$(Configuration)\$(Platform)\"</Command>
       <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Release_DX12|x64'">true</ExcludedFromBuild>
       <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Debug_OpenGL|x64'">true</ExcludedFromBuild>
     </ClCompile>
-    <ClCompile Include="Source\Rendering\Vulkan\Internal\DescriptorPool_Vulkan.cpp" />
-    <ClCompile Include="Source\Rendering\Vulkan\Internal\DescriptorSet_Vulkan.cpp" />
+    <ClCompile Include="Source\Rendering\Vulkan\Internal\DescriptorPool_Vulkan.cpp">
+      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Debug_DX12|x64'">true</ExcludedFromBuild>
+      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Release_OpenGL|x64'">true</ExcludedFromBuild>
+      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Release_DX12|x64'">true</ExcludedFromBuild>
+      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Debug_OpenGL|x64'">true</ExcludedFromBuild>
+    </ClCompile>
+    <ClCompile Include="Source\Rendering\Vulkan\Internal\DescriptorSet_Vulkan.cpp">
+      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Debug_DX12|x64'">true</ExcludedFromBuild>
+      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Release_OpenGL|x64'">true</ExcludedFromBuild>
+      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Release_DX12|x64'">true</ExcludedFromBuild>
+      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Debug_OpenGL|x64'">true</ExcludedFromBuild>
+    </ClCompile>
     <ClCompile Include="Source\Rendering\Vulkan\Internal\Fence_Vulkan.cpp">
       <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Debug_DX12|x64'">true</ExcludedFromBuild>
       <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Release_OpenGL|x64'">true</ExcludedFromBuild>
@@ -380,6 +390,12 @@ copy /y "DLLs\*.dll" "$(Configuration)\$(Platform)\"</Command>
       <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Release_DX12|x64'">true</ExcludedFromBuild>
       <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Debug_OpenGL|x64'">true</ExcludedFromBuild>
     </ClCompile>
+    <ClCompile Include="Source\Rendering\Vulkan\Internal\SwapChain_Vulkan.cpp">
+      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Debug_DX12|x64'">true</ExcludedFromBuild>
+      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Release_OpenGL|x64'">true</ExcludedFromBuild>
+      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Release_DX12|x64'">true</ExcludedFromBuild>
+      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Debug_OpenGL|x64'">true</ExcludedFromBuild>
+    </ClCompile>
     <ClCompile Include="Source\Rendering\Vulkan\Internal\VulkanHelper.cpp">
       <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Debug_DX12|x64'">true</ExcludedFromBuild>
       <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Release_OpenGL|x64'">true</ExcludedFromBuild>
@@ -602,8 +618,18 @@ copy /y "DLLs\*.dll" "$(Configuration)\$(Platform)\"</Command>
       <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Release_DX12|x64'">true</ExcludedFromBuild>
       <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Debug_OpenGL|x64'">true</ExcludedFromBuild>
     </ClInclude>
-    <ClInclude Include="Source\Rendering\Vulkan\Internal\DescriptorPool_Vulkan.h" />
-    <ClInclude Include="Source\Rendering\Vulkan\Internal\DescriptorSet_Vulkan.h" />
+    <ClInclude Include="Source\Rendering\Vulkan\Internal\DescriptorPool_Vulkan.h">
+      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Debug_DX12|x64'">true</ExcludedFromBuild>
+      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Release_OpenGL|x64'">true</ExcludedFromBuild>
+      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Release_DX12|x64'">true</ExcludedFromBuild>
+      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Debug_OpenGL|x64'">true</ExcludedFromBuild>
+    </ClInclude>
+    <ClInclude Include="Source\Rendering\Vulkan\Internal\DescriptorSet_Vulkan.h">
+      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Debug_DX12|x64'">true</ExcludedFromBuild>
+      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Release_OpenGL|x64'">true</ExcludedFromBuild>
+      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Release_DX12|x64'">true</ExcludedFromBuild>
+      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Debug_OpenGL|x64'">true</ExcludedFromBuild>
+    </ClInclude>
     <ClInclude Include="Source\Rendering\Vulkan\Internal\Fence_Vulkan.h">
       <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Debug_DX12|x64'">true</ExcludedFromBuild>
       <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Release_OpenGL|x64'">true</ExcludedFromBuild>
@@ -622,6 +648,12 @@ copy /y "DLLs\*.dll" "$(Configuration)\$(Platform)\"</Command>
       <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Release_DX12|x64'">true</ExcludedFromBuild>
       <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Debug_OpenGL|x64'">true</ExcludedFromBuild>
     </ClInclude>
+    <ClInclude Include="Source\Rendering\Vulkan\Internal\SwapChain_Vulkan.h">
+      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Debug_DX12|x64'">true</ExcludedFromBuild>
+      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Release_OpenGL|x64'">true</ExcludedFromBuild>
+      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Release_DX12|x64'">true</ExcludedFromBuild>
+      <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Debug_OpenGL|x64'">true</ExcludedFromBuild>
+    </ClInclude>
     <ClInclude Include="Source\Rendering\Vulkan\Internal\VulkanHelper.h">
       <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Debug_DX12|x64'">true</ExcludedFromBuild>
       <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Release_OpenGL|x64'">true</ExcludedFromBuild>
diff --git a/GraphicsFramework/GraphicsFramework/GraphicsFramework.vcxproj.filters b/GraphicsFramework/GraphicsFramework/GraphicsFramework.vcxproj.filters
index 53a55db..c56bb53 100644
--- a/GraphicsFramework/GraphicsFramework/GraphicsFramework.vcxproj.filters
+++ b/GraphicsFramework/GraphicsFramework/GraphicsFramework.vcxproj.filters
@@ -321,10 +321,13 @@
     <ClCompile Include="Source\Core\CommandLine.cpp">
       <Filter>Source\Core</Filter>
     </ClCompile>
+    <ClCompile Include="Source\Rendering\Vulkan\Internal\DescriptorPool_Vulkan.cpp">
+      <Filter>Source\Rendering\Vulkan\Internal</Filter>
+    </ClCompile>
     <ClCompile Include="Source\Rendering\Vulkan\Internal\DescriptorSet_Vulkan.cpp">
       <Filter>Source\Rendering\Vulkan\Internal</Filter>
     </ClCompile>
-    <ClCompile Include="Source\Rendering\Vulkan\Internal\DescriptorPool_Vulkan.cpp">
+    <ClCompile Include="Source\Rendering\Vulkan\Internal\SwapChain_Vulkan.cpp">
       <Filter>Source\Rendering\Vulkan\Internal</Filter>
     </ClCompile>
   </ItemGroup>
@@ -1319,10 +1322,13 @@
     <ClInclude Include="Source\Core\CommandLine.h">
       <Filter>Source\Core</Filter>
     </ClInclude>
+    <ClInclude Include="Source\Rendering\Vulkan\Internal\DescriptorPool_Vulkan.h">
+      <Filter>Source\Rendering\Vulkan\Internal</Filter>
+    </ClInclude>
     <ClInclude Include="Source\Rendering\Vulkan\Internal\DescriptorSet_Vulkan.h">
       <Filter>Source\Rendering\Vulkan\Internal</Filter>
     </ClInclude>
-    <ClInclude Include="Source\Rendering\Vulkan\Internal\DescriptorPool_Vulkan.h">
+    <ClInclude Include="Source\Rendering\Vulkan\Internal\SwapChain_Vulkan.h">
       <Filter>Source\Rendering\Vulkan\Internal</Filter>
     </ClInclude>
   </ItemGroup>
diff --git a/GraphicsFramework/GraphicsFramework/Source/Core/Components/Material.cpp b/GraphicsFramework/GraphicsFramework/Source/Core/Components/Material.cpp
index 0712240..df4ac46 100644
--- a/GraphicsFramework/GraphicsFramework/Source/Core/Components/Material.cpp
+++ b/GraphicsFramework/GraphicsFramework/Source/Core/Components/Material.cpp
@@ -38,8 +38,11 @@ void Material::Update()
 		}
 	}
 
-	MaterialDataUBO UboData{ glm::vec4(DiffuseColor, 1.0f), glm::vec4(mSpecular, 1.0f), mShininess, mLighting };
-	mMaterialUBO->AddData(sizeof(UboData), &UboData);
+	if (mMaterialUBO)
+	{
+		MaterialDataUBO UboData{ glm::vec4(DiffuseColor, 1.0f), glm::vec4(mSpecular, 1.0f), mShininess, mLighting };
+		mMaterialUBO->AddData(sizeof(UboData), &UboData);
+	}
 }
 
 void Material::Serialize(rapidjson::Value::Object data)
diff --git a/GraphicsFramework/GraphicsFramework/Source/Core/Components/Transform.cpp b/GraphicsFramework/GraphicsFramework/Source/Core/Components/Transform.cpp
index f329767..c4c4c52 100644
--- a/GraphicsFramework/GraphicsFramework/Source/Core/Components/Transform.cpp
+++ b/GraphicsFramework/GraphicsFramework/Source/Core/Components/Transform.cpp
@@ -7,7 +7,8 @@
 #include "Rendering/Renderer.h"
 #include "Rendering/RenderingFactory.h"
 
-Transform::Transform()
+Transform::Transform() :
+	mMatricesUBO(nullptr)
 {
 	mMatricesUBO = RenderingFactory::Instance()->CreateUniformBuffer();
 	mMatricesUBO->Init(sizeof(ObjectMatricesUBO), Engine::Instance()->GetSettings().mTransformBindingPoint);
@@ -31,9 +32,12 @@ void Transform::Update()
 	}
 
 	SetModelTransformation();
-
-	ObjectMatricesUBO UboData{ mModelTransformation, glm::inverse(mModelTransformation), mPrevModelTransformation };
-	mMatricesUBO->AddData(sizeof(UboData), &UboData);
+	
+	if (mMatricesUBO)
+	{
+		ObjectMatricesUBO UboData{ mModelTransformation, glm::inverse(mModelTransformation), mPrevModelTransformation };
+		mMatricesUBO->AddData(sizeof(ObjectMatricesUBO), &UboData);
+	}
 }
 
 void Transform::Serialize(rapidjson::Value::Object data)
diff --git a/GraphicsFramework/GraphicsFramework/Source/Core/Core.h b/GraphicsFramework/GraphicsFramework/Source/Core/Core.h
index 956e0a2..1f9500b 100644
--- a/GraphicsFramework/GraphicsFramework/Source/Core/Core.h
+++ b/GraphicsFramework/GraphicsFramework/Source/Core/Core.h
@@ -19,6 +19,7 @@
 #include <rapidjson/writer.h>
 
 // GLM
+//#define GLM_FORCE_DEFAULT_ALIGNED_GENTYPES
 #include <glm/gtc/matrix_transform.hpp>
 #define GLM_ENABLE_EXPERIMENTAL
 #include <glm/ext.hpp>
diff --git a/GraphicsFramework/GraphicsFramework/Source/Core/ImguiManager.cpp b/GraphicsFramework/GraphicsFramework/Source/Core/ImguiManager.cpp
index 142494c..3800075 100644
--- a/GraphicsFramework/GraphicsFramework/Source/Core/ImguiManager.cpp
+++ b/GraphicsFramework/GraphicsFramework/Source/Core/ImguiManager.cpp
@@ -108,9 +108,9 @@ void ImguiManager::Render()
 	if (VkRenderer)
 	{
 		const FrameBuffer_Vulkan* VkFrameBuffer = static_cast<const FrameBuffer_Vulkan*>(VkRenderer->GetBackBuffer());
-		VkRenderer->GetImGuiRenderPass()->BeginPass(VkRenderer->GetRenderCommandBuffer(), VkFrameBuffer);
-		ImGui_ImplVulkan_RenderDrawData(ImGui::GetDrawData(), VkRenderer->GetRenderCommandBuffer()->mCommandBuffer);
-		VkRenderer->GetImGuiRenderPass()->EndPass(VkRenderer->GetRenderCommandBuffer());
+		VkRenderer->GetImGuiRenderPass()->BeginPass(VkRenderer->GetCommandBuffer(), VkFrameBuffer);
+		ImGui_ImplVulkan_RenderDrawData(ImGui::GetDrawData(), VkRenderer->GetCommandBuffer()->mCommandBuffer);
+		VkRenderer->GetImGuiRenderPass()->EndPass(VkRenderer->GetCommandBuffer());
 	}
 #elif defined(RENDERER_DX12)
 #endif
diff --git a/GraphicsFramework/GraphicsFramework/Source/Core/Object.h b/GraphicsFramework/GraphicsFramework/Source/Core/Object.h
index d6d69fd..2e0c231 100644
--- a/GraphicsFramework/GraphicsFramework/Source/Core/Object.h
+++ b/GraphicsFramework/GraphicsFramework/Source/Core/Object.h
@@ -1,6 +1,7 @@
 #pragma once
 #include <rapidjson/document.h>
 #include <vector>
+#include <string>
 #include <typeindex>
 #include <unordered_map>
 
@@ -26,6 +27,7 @@ public:
 public:
 	std::unordered_map<std::type_index, Component*> mComponents;
 	std::vector<std::type_index> mIndices;
+	std::string mName;
 };
 
 template <typename T>
diff --git a/GraphicsFramework/GraphicsFramework/Source/Core/ObjectManager.cpp b/GraphicsFramework/GraphicsFramework/Source/Core/ObjectManager.cpp
index 0df04ac..ed1c296 100644
--- a/GraphicsFramework/GraphicsFramework/Source/Core/ObjectManager.cpp
+++ b/GraphicsFramework/GraphicsFramework/Source/Core/ObjectManager.cpp
@@ -12,6 +12,7 @@ Object* ObjectManager::AddObject(std::string path)
 {
 	auto root = JSONHelper::ParseFile(path);
 	Object* object = new Object();
+	object->mName = path;
 	object->Serialize(root.GetObject());
 	mObjects.emplace_back(object);
 	return object;
@@ -21,6 +22,7 @@ Object* ObjectManager::ReadObject(std::string path)
 {
 	auto root = JSONHelper::ParseFile(path);
 	Object* object = new Object();
+	object->mName = path;
 	object->Serialize(root.GetObject());
 	return object;
 }
diff --git a/GraphicsFramework/GraphicsFramework/Source/Rendering/OpenGL/Shader_OpenGL.cpp b/GraphicsFramework/GraphicsFramework/Source/Rendering/OpenGL/Shader_OpenGL.cpp
index b1e5b4c..6dfdd04 100644
--- a/GraphicsFramework/GraphicsFramework/Source/Rendering/OpenGL/Shader_OpenGL.cpp
+++ b/GraphicsFramework/GraphicsFramework/Source/Rendering/OpenGL/Shader_OpenGL.cpp
@@ -17,12 +17,34 @@ Shader_OpenGL::Shader_OpenGL()
 	GLCall(m_RendererID = glCreateProgram());
 }
 
-void Shader_OpenGL::Init(std::string vertexShaderId, std::string fragmentShaderId)
+void Shader_OpenGL::Init(std::string shaderId)
 {
-	ShaderSource shaders;
-	shaders.vertexSource = ShaderManager::Instance()->GetShaderContents(vertexShaderId);
-	shaders.fragmentSource = ShaderManager::Instance()->GetShaderContents(fragmentShaderId);
-	m_RendererID = CreateProgram(shaders);
+	ShaderSource shaders = ShaderManager::Instance()->GetShaderSource(shaderId);
+
+	GLCall(m_RendererID = glCreateProgram());
+	unsigned int vs = CompileShader(GL_VERTEX_SHADER, shaders.vertexSource);
+	unsigned int fs = CompileShader(GL_FRAGMENT_SHADER, shaders.fragmentSource);
+
+	GLCall(glAttachShader(m_RendererID, vs));
+	GLCall(glAttachShader(m_RendererID, fs));
+	GLCall(glLinkProgram(m_RendererID));
+
+	int result;
+	GLCall(glGetProgramiv(m_RendererID, GL_LINK_STATUS, &result));
+	if (result == GL_FALSE)
+	{
+		int length;
+		GLCall(glGetProgramiv(m_RendererID, GL_INFO_LOG_LENGTH, &length));
+		char* message = (char*)alloca(length * sizeof(char));
+		GLCall(glGetProgramInfoLog(m_RendererID, length, &length, message));
+		std::cout << "Failed to link " << std::endl;
+		std::cout << message << std::endl;
+	}
+
+	GLCall(glValidateProgram(m_RendererID));
+
+	GLCall(glDeleteShader(vs));
+	GLCall(glDeleteShader(fs));
 }
 
 void Shader_OpenGL::Uses(const FrameBuffer* framebuffer)
@@ -73,37 +95,6 @@ unsigned int Shader_OpenGL::CompileShader(unsigned int type, const std::vector<c
 	return id;
 }
 
-unsigned int Shader_OpenGL::CreateProgram(const ShaderSource& shaderSource)
-{
-	GLCall(unsigned int program = glCreateProgram());
-	unsigned int vs = CompileShader(GL_VERTEX_SHADER, shaderSource.vertexSource);
-	unsigned int fs = CompileShader(GL_FRAGMENT_SHADER, shaderSource.fragmentSource);
-
-	GLCall(glAttachShader(program, vs));
-	GLCall(glAttachShader(program, fs));
-	GLCall(glLinkProgram(program));
-
-	int result;
-	GLCall(glGetProgramiv(program, GL_LINK_STATUS, &result));
-	if (result == GL_FALSE)
-	{
-		int length;
-		GLCall(glGetProgramiv(program, GL_INFO_LOG_LENGTH, &length));
-		char* message = (char*)alloca(length * sizeof(char));
-		GLCall(glGetProgramInfoLog(program, length, &length, message));
-		std::cout << "Failed to link " << std::endl;
-		std::cout << message << std::endl;
-		return 0;
-	}
-
-	GLCall(glValidateProgram(program));
-
-	GLCall(glDeleteShader(vs));
-	GLCall(glDeleteShader(fs));
-
-	return program;
-}
-
 void Shader_OpenGL::SetUniform3f(const std::string& name, float v1, float v2, float v3)
 {
 	GLCall(glUniform3f(GetUniformLocation(name), v1, v2, v3));
diff --git a/GraphicsFramework/GraphicsFramework/Source/Rendering/OpenGL/Shader_OpenGL.h b/GraphicsFramework/GraphicsFramework/Source/Rendering/OpenGL/Shader_OpenGL.h
index b302e34..3a0f424 100644
--- a/GraphicsFramework/GraphicsFramework/Source/Rendering/OpenGL/Shader_OpenGL.h
+++ b/GraphicsFramework/GraphicsFramework/Source/Rendering/OpenGL/Shader_OpenGL.h
@@ -15,7 +15,7 @@ public:
 	Shader_OpenGL();
 	virtual ~Shader_OpenGL();
 
-	virtual void Init(std::string vertexShaderId, std::string fragmentShaderId) override;
+	virtual void Init(std::string shaderId) override;
 	
 	virtual void Uses(const FrameBuffer* framebuffer) override;
 	virtual void Uses(const Texture* texture, unsigned int slot = 0) override;
@@ -42,6 +42,5 @@ protected:
 	void SetUniform4fvLoc(int location, glm::vec4 vector);
 	void SetUniformBlock(const std::string& name, unsigned int bindPoint);
 
-	unsigned int CreateProgram(const ShaderSource& shaderSource);
 	unsigned int CompileShader(unsigned int type, const std::vector<char>& Source);
 };
\ No newline at end of file
diff --git a/GraphicsFramework/GraphicsFramework/Source/Rendering/OpenGL/UniformBuffer_OpenGL.cpp b/GraphicsFramework/GraphicsFramework/Source/Rendering/OpenGL/UniformBuffer_OpenGL.cpp
index d494bce..b4c4b17 100644
--- a/GraphicsFramework/GraphicsFramework/Source/Rendering/OpenGL/UniformBuffer_OpenGL.cpp
+++ b/GraphicsFramework/GraphicsFramework/Source/Rendering/OpenGL/UniformBuffer_OpenGL.cpp
@@ -2,8 +2,11 @@
 
 #include "Rendering/OpenGL/Renderer_OpenGL.h"
 
+#include "Core/Core.h"
+
 UniformBuffer_OpenGL::UniformBuffer_OpenGL() :
-	m_RendererId(0)
+	m_RendererId(0),
+	mBinding(0)
 {
 	GLCall(glGenBuffers(1, &m_RendererId));
 }
@@ -15,6 +18,7 @@ UniformBuffer_OpenGL::~UniformBuffer_OpenGL()
 
 void UniformBuffer_OpenGL::Init(uint32_t size, uint32_t binding, const void* data)
 {
+	mBinding = binding;
 	GLCall(glBindBuffer(GL_UNIFORM_BUFFER, m_RendererId));
 	GLCall(glBufferData(GL_UNIFORM_BUFFER, size, data? data : NULL, GL_STATIC_DRAW));
 	GLCall(glBindBuffer(GL_UNIFORM_BUFFER, 0));
diff --git a/GraphicsFramework/GraphicsFramework/Source/Rendering/OpenGL/UniformBuffer_OpenGL.h b/GraphicsFramework/GraphicsFramework/Source/Rendering/OpenGL/UniformBuffer_OpenGL.h
index 701b1f7..efa88aa 100644
--- a/GraphicsFramework/GraphicsFramework/Source/Rendering/OpenGL/UniformBuffer_OpenGL.h
+++ b/GraphicsFramework/GraphicsFramework/Source/Rendering/OpenGL/UniformBuffer_OpenGL.h
@@ -10,6 +10,9 @@ public:
 
 	virtual void Init(uint32_t size, uint32_t binding, const void* data = nullptr) override;
 	virtual void AddData(uint32_t size, const void* data, uint32_t offset = 0) const override;
-
+	
+	virtual uint32_t GetBinding() const override{ return mBinding; }
+	
 	unsigned int m_RendererId;
+	uint32_t mBinding;
 };
diff --git a/GraphicsFramework/GraphicsFramework/Source/Rendering/Shader.h b/GraphicsFramework/GraphicsFramework/Source/Rendering/Shader.h
index f941b95..ffd04df 100644
--- a/GraphicsFramework/GraphicsFramework/Source/Rendering/Shader.h
+++ b/GraphicsFramework/GraphicsFramework/Source/Rendering/Shader.h
@@ -33,5 +33,5 @@ public:
 	virtual void Uses(const VertexBuffer* vertexBuffer) = 0;
 	virtual void Uses(const IndexBuffer* indexBuffer) = 0;
 
-	virtual void Init(std::string vertexShaderId, std::string fragmentShaderId) = 0;
+	virtual void Init(std::string shaderId) = 0;
 };
\ No newline at end of file
diff --git a/GraphicsFramework/GraphicsFramework/Source/Rendering/ShaderManager.cpp b/GraphicsFramework/GraphicsFramework/Source/Rendering/ShaderManager.cpp
index e69468c..eb22a88 100644
--- a/GraphicsFramework/GraphicsFramework/Source/Rendering/ShaderManager.cpp
+++ b/GraphicsFramework/GraphicsFramework/Source/Rendering/ShaderManager.cpp
@@ -4,7 +4,7 @@
 #include "Utils/FileHelper.h"
 #include "Utils/JSONHelper.h"
 
-DISABLE_OPTIMIZATION
+
 void ShaderManager::Init(std::string ShadersListFilePath)
 {
 	rapidjson::Document ShadersList = JSONHelper::ParseFile(ShadersListFilePath);
@@ -16,37 +16,76 @@ void ShaderManager::Init(std::string ShadersListFilePath)
 
 		for (int32_t i = 0; i < ShadersArray.Size(); ++i)
 		{
-			rapidjson::Value::Object Shader = ShadersArray[i].GetObject();
-			if (Shader.HasMember("Api"))
+			rapidjson::Value::Object shader = ShadersArray[i].GetObject();
+			if (shader.HasMember("Id"))
 			{
-				if (RenderingFactory::Instance()->GetApiName() != Shader["Api"].GetString())
+				ShaderSource shaderSource;
+				if (shader.HasMember("VertexShader"))
 				{
-					continue;
+					shaderSource.vertexSource = GetShaderContent(shader["VertexShader"]);
+				}
+				if (shader.HasMember("FragmentShader"))
+				{
+					shaderSource.fragmentSource = GetShaderContent(shader["FragmentShader"]);
 				}
-			}
 
-			if (Shader.HasMember("Id") && Shader.HasMember("Path"))
-			{
-				mShadersList.emplace(Shader["Id"].GetString(), Shader["Path"].GetString());
+				mShadersList.emplace(shader["Id"].GetString(), shaderSource);
 			}
 		}
 	}
 }
 
-std::vector<char> ShaderManager::GetShaderContents(const std::string& shaderId)
+const ShaderSource& ShaderManager::GetShaderSource(const std::string& shaderId)
 {
 	auto foundItr = mShadersList.find(shaderId);
 	if (foundItr != mShadersList.end())
 	{
-		const std::string& filePath = foundItr->second;
+		return foundItr->second;
+	}
 
+	return ShaderSource();
+}
+
+std::vector<char> ShaderManager::GetShaderContent(rapidjson::Value& shaderInfo)
+{
+	std::string shaderFilePath;
+	// shader variants exist, get the appropriate shaderFilePath
+	if (shaderInfo.IsArray())
+	{
+		rapidjson::Value::Array shaderVariantsInfo = shaderInfo.GetArray();
+		for (int32_t i = 0; i < shaderVariantsInfo.Size(); ++i)
+		{
+			if (shaderVariantsInfo[i].IsObject())
+			{
+				rapidjson::Value::Object VariantInfo = shaderVariantsInfo[i].GetObject();
+				if (VariantInfo.HasMember("Api") && VariantInfo.HasMember("Variant"))
+				{
+					if (RenderingFactory::Instance()->GetApiName() == VariantInfo["Api"].GetString())
+					{
+						shaderFilePath = VariantInfo["Variant"].GetString();
+						break;
+					}
+				}
+			}
+		}
+	}
+	else if(shaderInfo.IsString())
+	{
+		shaderFilePath = shaderInfo.GetString();
+	}
+	else
+	{
+		std::cout << "Invalid entry in Shaders list file." << std::endl;
+		return std::vector<char>();
+	}
+
+	if (!shaderFilePath.empty())
+	{
 #if defined(RENDERER_OPENGL)
-		return FileHelper::ReadFile(filePath);
+		return FileHelper::ReadFile(shaderFilePath);
 #elif defined(RENDERER_VULKAN)
-		return FileHelper::ReadBinaryFile(filePath + ".spv");
+		return FileHelper::ReadBinaryFile(shaderFilePath + ".spv");
 #endif
 	}
-
 	return std::vector<char>();
-}
-ENABLE_OPTIMIZATION
\ No newline at end of file
+}
\ No newline at end of file
diff --git a/GraphicsFramework/GraphicsFramework/Source/Rendering/ShaderManager.h b/GraphicsFramework/GraphicsFramework/Source/Rendering/ShaderManager.h
index 1dfc7de..67c1c91 100644
--- a/GraphicsFramework/GraphicsFramework/Source/Rendering/ShaderManager.h
+++ b/GraphicsFramework/GraphicsFramework/Source/Rendering/ShaderManager.h
@@ -1,6 +1,7 @@
 #pragma once
 
 #include "Core/Core.h"
+#include "Rendering/Shader.h"
 
 class ShaderManager : public Singleton<ShaderManager>
 {
@@ -8,8 +9,10 @@ public:
 
 	void Init(std::string ShadersListFilePath);
 
-	std::vector<char> GetShaderContents(const std::string& shaderId);
+	const ShaderSource& GetShaderSource(const std::string& shaderId);
 
 protected:
-	std::unordered_map<std::string, std::string> mShadersList;
+	std::vector<char> GetShaderContent(rapidjson::Value& shaderInfo);
+
+	std::unordered_map<std::string, ShaderSource> mShadersList;
 };
\ No newline at end of file
diff --git a/GraphicsFramework/GraphicsFramework/Source/Rendering/UniformBuffer.h b/GraphicsFramework/GraphicsFramework/Source/Rendering/UniformBuffer.h
index 8b83530..95d6dea 100644
--- a/GraphicsFramework/GraphicsFramework/Source/Rendering/UniformBuffer.h
+++ b/GraphicsFramework/GraphicsFramework/Source/Rendering/UniformBuffer.h
@@ -8,4 +8,6 @@ public:
 
 	virtual void Init(uint32_t size, uint32_t binding, const void* data = nullptr) = 0;
 	virtual void AddData(uint32_t size, const void* data, uint32_t offset = 0) const = 0;
+
+	virtual uint32_t GetBinding() const = 0;
 };
diff --git a/GraphicsFramework/GraphicsFramework/Source/Rendering/Vulkan/FrameBuffer_Vulkan.cpp b/GraphicsFramework/GraphicsFramework/Source/Rendering/Vulkan/FrameBuffer_Vulkan.cpp
index 6d6348a..642fb5d 100644
--- a/GraphicsFramework/GraphicsFramework/Source/Rendering/Vulkan/FrameBuffer_Vulkan.cpp
+++ b/GraphicsFramework/GraphicsFramework/Source/Rendering/Vulkan/FrameBuffer_Vulkan.cpp
@@ -42,6 +42,9 @@ void FrameBuffer_Vulkan::Init(int width, int height, ImageFormat format, int Tex
 	Renderer_Vulkan* VkRenderer = static_cast<Renderer_Vulkan*>(Renderer::Instance());
 	if (VkRenderer)
 	{
+		mRenderPass = new RenderPass_Vulkan();
+		mRenderPass->Init(Texture_Vulkan::GetVkFormat(format), true, false);
+
 		VkImageView ImageView;
 		VkFramebufferCreateInfo FrameBufferInfo = { VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO };
 		FrameBufferInfo.renderPass = mRenderPass->mRenderPass;
@@ -52,9 +55,6 @@ void FrameBuffer_Vulkan::Init(int width, int height, ImageFormat format, int Tex
 		FrameBufferInfo.layers = 1;
 
 		VKCall(vkCreateFramebuffer(VkRenderer->GetDevice(), &FrameBufferInfo, nullptr, &mFrameBuffer), "FrameBuffer creation Failed.");
-
-		mRenderPass = new RenderPass_Vulkan();
-		mRenderPass->Init(Texture_Vulkan::GetVkFormat(format), true, false);
 	}
 }
 
diff --git a/GraphicsFramework/GraphicsFramework/Source/Rendering/Vulkan/Internal/CommandQueue_Vulkan.cpp b/GraphicsFramework/GraphicsFramework/Source/Rendering/Vulkan/Internal/CommandQueue_Vulkan.cpp
index b0f1069..030fca0 100644
--- a/GraphicsFramework/GraphicsFramework/Source/Rendering/Vulkan/Internal/CommandQueue_Vulkan.cpp
+++ b/GraphicsFramework/GraphicsFramework/Source/Rendering/Vulkan/Internal/CommandQueue_Vulkan.cpp
@@ -4,6 +4,7 @@
 #include "CommandBuffer_Vulkan.h"
 #include "Fence_Vulkan.h"
 #include "Semaphore_Vulkan.h"
+#include "SwapChain_Vulkan.h"
 
 CommandQueue_Vulkan::CommandQueue_Vulkan() :
 	mQueue(VK_NULL_HANDLE)
@@ -83,7 +84,7 @@ void CommandQueue_Vulkan::SubmitCommandBuffer(const CommandBuffer_Vulkan* comman
 	VKCall(vkQueueSubmit(mQueue, 1, &SubmitInfo, Fence ? Fence->mFence : VK_NULL_HANDLE), "Command Buffer Submit Failed.");
 }
 
-void CommandQueue_Vulkan::PresentToScreen(const Semaphore_Vulkan* WaitFor, VkSwapchainKHR SwapChain, uint32_t SwapChainImageIdx) const
+void CommandQueue_Vulkan::PresentToScreen(const Semaphore_Vulkan* WaitFor, const SwapChain_Vulkan* SwapChain) const
 {
 	if (mType != CommandQueueType::Present)
 	{
@@ -96,8 +97,8 @@ void CommandQueue_Vulkan::PresentToScreen(const Semaphore_Vulkan* WaitFor, VkSwa
 	PresentInfo.waitSemaphoreCount = ARRAY_SIZE(WaitSemaphores);
 	PresentInfo.pWaitSemaphores = WaitSemaphores;
 	PresentInfo.swapchainCount = 1;
-	PresentInfo.pSwapchains = &SwapChain;
-	PresentInfo.pImageIndices = &SwapChainImageIdx;
+	PresentInfo.pSwapchains = &SwapChain->SwapChain;
+	PresentInfo.pImageIndices = &SwapChain->ImageIdx;
 	PresentInfo.pResults = nullptr;
 
 	VkResult PresentResult = vkQueuePresentKHR(mQueue, &PresentInfo);
diff --git a/GraphicsFramework/GraphicsFramework/Source/Rendering/Vulkan/Internal/CommandQueue_Vulkan.h b/GraphicsFramework/GraphicsFramework/Source/Rendering/Vulkan/Internal/CommandQueue_Vulkan.h
index 5867fea..97fe7ae 100644
--- a/GraphicsFramework/GraphicsFramework/Source/Rendering/Vulkan/Internal/CommandQueue_Vulkan.h
+++ b/GraphicsFramework/GraphicsFramework/Source/Rendering/Vulkan/Internal/CommandQueue_Vulkan.h
@@ -5,6 +5,7 @@
 class CommandBuffer_Vulkan;
 class Semaphore_Vulkan;
 class Fence_Vulkan;
+class SwapChain_Vulkan;
 
 class CommandQueue_Vulkan
 {
@@ -15,7 +16,7 @@ public:
 	void Init(CommandQueueType type);
 	void SubmitCommandBuffer(const CommandBuffer_Vulkan* commandBuffer, bool bWait = false) const;
 	void SubmitCommandBuffer(const CommandBuffer_Vulkan* commandBuffer, const Semaphore_Vulkan* WaitFor = nullptr, const Semaphore_Vulkan* SignalFinish = nullptr, const Fence_Vulkan* Fence = nullptr) const;
-	void PresentToScreen(const Semaphore_Vulkan* WaitFor, VkSwapchainKHR SwapChain, uint32_t SwapChainImageIdx) const;
+	void PresentToScreen(const Semaphore_Vulkan* WaitFor, const SwapChain_Vulkan* SwapChain) const;
 
 	VkQueue mQueue;
 	CommandQueueType mType;
diff --git a/GraphicsFramework/GraphicsFramework/Source/Rendering/Vulkan/Internal/RenderPass_Vulkan.cpp b/GraphicsFramework/GraphicsFramework/Source/Rendering/Vulkan/Internal/RenderPass_Vulkan.cpp
index 447674a..7d479eb 100644
--- a/GraphicsFramework/GraphicsFramework/Source/Rendering/Vulkan/Internal/RenderPass_Vulkan.cpp
+++ b/GraphicsFramework/GraphicsFramework/Source/Rendering/Vulkan/Internal/RenderPass_Vulkan.cpp
@@ -12,7 +12,7 @@ RenderPass_Vulkan::~RenderPass_Vulkan()
 {
 	vkDestroyRenderPass(Renderer_Vulkan::Get()->GetDevice(), mRenderPass, nullptr);
 }
-
+DISABLE_OPTIMIZATION
 void RenderPass_Vulkan::Init(VkFormat Format, bool bClearOnLoad, bool bPresentToScreen)
 {
 	VkAttachmentDescription AttachmentDesc = {};
@@ -52,7 +52,7 @@ void RenderPass_Vulkan::Init(VkFormat Format, bool bClearOnLoad, bool bPresentTo
 
 	VKCall(vkCreateRenderPass(Renderer_Vulkan::Get()->GetDevice(), &RenderPassInfo, nullptr, &mRenderPass), "ImGui RenderPass creation Failed.");
 }
-
+ENABLE_OPTIMIZATION
 void RenderPass_Vulkan::BeginPass(const CommandBuffer_Vulkan* commandBuffer, const FrameBuffer_Vulkan* frameBuffer) const
 {
 	VkRenderPassBeginInfo RenderPassBeginInfo = { VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO };
diff --git a/GraphicsFramework/GraphicsFramework/Source/Rendering/Vulkan/Internal/VulkanHelper.cpp b/GraphicsFramework/GraphicsFramework/Source/Rendering/Vulkan/Internal/VulkanHelper.cpp
index a2fdfd6..9530e82 100644
--- a/GraphicsFramework/GraphicsFramework/Source/Rendering/Vulkan/Internal/VulkanHelper.cpp
+++ b/GraphicsFramework/GraphicsFramework/Source/Rendering/Vulkan/Internal/VulkanHelper.cpp
@@ -10,6 +10,7 @@
 #include "CommandBuffer_Vulkan.h"
 #include "CommandQueue_Vulkan.h"
 #include "RenderPass_Vulkan.h"
+#include "SwapChain_Vulkan.h"
 
 // Required Layers
 const std::vector<const char*> Layers = {
@@ -18,54 +19,6 @@ const std::vector<const char*> Layers = {
 #endif
 };
 
-bool SwapChainDetails::IsValid()
-{
-	return !Formats.empty() && !PresentModes.empty();
-}
-
-VkExtent2D SwapChainDetails::GetImageExtent()
-{
-	if (SurfaceCapabilities.currentExtent.width != std::numeric_limits<uint32_t>::max())
-	{
-		return SurfaceCapabilities.currentExtent;
-	}
-
-	int Width, Height;
-	SDL_Vulkan_GetDrawableSize(Window::Instance()->GetWindow(), &Width, &Height);
-
-	VkExtent2D ImageExtent;
-	ImageExtent.width = std::clamp((uint32_t)Width, SurfaceCapabilities.minImageExtent.width, SurfaceCapabilities.maxImageExtent.width);
-	ImageExtent.height = std::clamp((uint32_t)Height, SurfaceCapabilities.minImageExtent.height, SurfaceCapabilities.maxImageExtent.height);
-
-	return ImageExtent;
-}
-
-const VkSurfaceFormatKHR& SwapChainDetails::GetSurfaceFormat()
-{
-	for (const VkSurfaceFormatKHR& FormatData : Formats)
-	{
-		if (FormatData.colorSpace == VK_COLORSPACE_SRGB_NONLINEAR_KHR)
-		{
-			return FormatData;
-		}
-	}
-
-	return Formats[0];
-}
-
-const VkPresentModeKHR SwapChainDetails::GetPresentMode()
-{
-	for (VkPresentModeKHR PresentMode : PresentModes)
-	{
-		if (PresentMode == VK_PRESENT_MODE_MAILBOX_KHR)
-		{
-			return PresentMode;
-		}
-	}
-
-	return VK_PRESENT_MODE_FIFO_KHR;
-}
-
 bool VulkanHelper::AreLayersAvailable(std::vector<const char*> Layers)
 {
 	uint32_t AvailableLayerCount = 0;
@@ -153,31 +106,6 @@ bool VulkanHelper::AreDeviceExtensionsAvailable(std::vector<const char*> Extensi
 	return true;
 }
 
-SwapChainDetails VulkanHelper::GetSwapChainDetails(VkPhysicalDevice PhysicalDevice, VkSurfaceKHR Surface)
-{
-	SwapChainDetails Details;
-
-	vkGetPhysicalDeviceSurfaceCapabilitiesKHR(PhysicalDevice, Surface, &Details.SurfaceCapabilities);
-
-	uint32_t SurfaceFormatCount = 0;
-	vkGetPhysicalDeviceSurfaceFormatsKHR(PhysicalDevice, Surface, &SurfaceFormatCount, nullptr);
-	if (SurfaceFormatCount > 0)
-	{
-		Details.Formats.resize(SurfaceFormatCount);
-		vkGetPhysicalDeviceSurfaceFormatsKHR(PhysicalDevice, Surface, &SurfaceFormatCount, Details.Formats.data());
-	}
-
-	uint32_t SurfacePresentModesCount = 0;
-	vkGetPhysicalDeviceSurfacePresentModesKHR(PhysicalDevice, Surface, &SurfacePresentModesCount, nullptr);
-	if (SurfacePresentModesCount > 0)
-	{
-		Details.PresentModes.resize(SurfacePresentModesCount);
-		vkGetPhysicalDeviceSurfacePresentModesKHR(PhysicalDevice, Surface, &SurfacePresentModesCount, Details.PresentModes.data());
-	}
-
-	return Details;
-}
-
 bool VulkanHelper::IsDeviceSupported(VkPhysicalDevice PhysicalDevice, VkSurfaceKHR Surface, QueueFamilyIndices* OutQueueFamilyData)
 {
 	// Device supported checks
@@ -219,7 +147,7 @@ bool VulkanHelper::IsDeviceSupported(VkPhysicalDevice PhysicalDevice, VkSurfaceK
 			bool bExtensionsSupported = AreDeviceExtensionsAvailable(VulkanRenderer->DeviceExtensions, PhysicalDevice);
 
 			// Is swapchain supported
-			SwapChainDetails SwapChainData = GetSwapChainDetails(PhysicalDevice, Surface);
+			SwapChainDetails SwapChainData = SwapChain_Vulkan::GetSwapChainDetails(PhysicalDevice, Surface);
 
 			if (bExtensionsSupported && OutQueueFamilyData->IsValid() && SwapChainData.IsValid())
 			{
@@ -289,75 +217,6 @@ void VulkanHelper::DestroyDebugMessenger(VkDebugUtilsMessengerEXT DebugMessenger
 	}
 }
 
-void VulkanHelper::CreateSwapChain(Renderer_Vulkan* VkRenderer)
-{
-	SwapChainDetails SwapChainData = GetSwapChainDetails(VkRenderer->PhysicalDevice, VkRenderer->Surface);
-
-	if (SwapChainData.IsValid())
-	{
-		VkSurfaceFormatKHR SurfaceFormat = SwapChainData.GetSurfaceFormat();
-
-		VkSwapchainCreateInfoKHR SwapChainInfo = { VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR };
-		SwapChainInfo.surface = VkRenderer->Surface;
-		SwapChainInfo.minImageCount = BACKBUFFER_COUNT;
-		SwapChainInfo.imageFormat = SurfaceFormat.format;
-		VkRenderer->SwapChainImageFormat = SurfaceFormat.format;
-		SwapChainInfo.imageColorSpace = SurfaceFormat.colorSpace;
-		SwapChainInfo.imageExtent = SwapChainData.GetImageExtent();
-		VkRenderer->SwapChainImageExtent = SwapChainInfo.imageExtent;
-		SwapChainInfo.imageArrayLayers = 1;
-		SwapChainInfo.imageUsage = VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT;
-		SwapChainInfo.preTransform = SwapChainData.SurfaceCapabilities.currentTransform;
-		SwapChainInfo.compositeAlpha = VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR;
-		SwapChainInfo.presentMode = SwapChainData.GetPresentMode();
-		SwapChainInfo.clipped = VK_TRUE;
-		SwapChainInfo.oldSwapchain = VK_NULL_HANDLE;
-
-		if (VkRenderer->QueueFamilyData.QueueIndices[CommandQueueType::Graphics] != VkRenderer->QueueFamilyData.QueueIndices[CommandQueueType::Present])
-		{
-			const std::vector<uint32_t> QueueFamilyIndices = {VkRenderer->QueueFamilyData.QueueIndices[CommandQueueType::Graphics], VkRenderer->QueueFamilyData.QueueIndices[CommandQueueType::Present] };
-			SwapChainInfo.imageSharingMode = VK_SHARING_MODE_CONCURRENT;
-			SwapChainInfo.queueFamilyIndexCount = QueueFamilyIndices.size();
-			SwapChainInfo.pQueueFamilyIndices = QueueFamilyIndices.data();
-		}
-		else
-		{
-			SwapChainInfo.imageSharingMode = VK_SHARING_MODE_EXCLUSIVE;
-			SwapChainInfo.queueFamilyIndexCount = 0;
-			SwapChainInfo.pQueueFamilyIndices = nullptr;
-		}
-
-		VKCall(vkCreateSwapchainKHR(VkRenderer->Device, &SwapChainInfo, nullptr, &VkRenderer->SwapChain), "SwapChain creation Failed.");
-
-		// Get SwapChain Images
-		uint32_t SwapChainImagesCount = 0;
-		VKCall(vkGetSwapchainImagesKHR(VkRenderer->Device, VkRenderer->SwapChain, &SwapChainImagesCount, nullptr), "Swapchain Images Count retrival Failed.");
-		VkRenderer->SwapChainImages.resize(SwapChainImagesCount);
-		VKCall(vkGetSwapchainImagesKHR(VkRenderer->Device, VkRenderer->SwapChain, &SwapChainImagesCount, VkRenderer->SwapChainImages.data()), "Swapchain Images retrival Failed.");
-
-		// Create Image Views
-		VkRenderer->SwapChainImageViews.resize(SwapChainImagesCount);
-		for (uint16_t i = 0; i < VkRenderer->SwapChainImages.size(); ++i)
-		{
-			VkImageViewCreateInfo ImageViewInfo = { VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO };
-			ImageViewInfo.image = VkRenderer->SwapChainImages[i];
-			ImageViewInfo.viewType = VK_IMAGE_VIEW_TYPE_2D;
-			ImageViewInfo.format = VkRenderer->SwapChainImageFormat;
-			ImageViewInfo.components.r = VK_COMPONENT_SWIZZLE_IDENTITY;
-			ImageViewInfo.components.g = VK_COMPONENT_SWIZZLE_IDENTITY;
-			ImageViewInfo.components.b = VK_COMPONENT_SWIZZLE_IDENTITY;
-			ImageViewInfo.components.a = VK_COMPONENT_SWIZZLE_IDENTITY;
-			ImageViewInfo.subresourceRange.layerCount = 1;
-			ImageViewInfo.subresourceRange.baseArrayLayer = 0;
-			ImageViewInfo.subresourceRange.levelCount = 1;
-			ImageViewInfo.subresourceRange.baseMipLevel = 0;
-			ImageViewInfo.subresourceRange.aspectMask = VK_IMAGE_ASPECT_COLOR_BIT;
-
-			VKCall(vkCreateImageView(VkRenderer->Device, &ImageViewInfo, nullptr, &VkRenderer->SwapChainImageViews[i]), "Swapchain Image View creation Failed.");
-		}
-	}
-}
-
 void VulkanHelper::InitVulkan()
 {
 	Renderer_Vulkan* VkRenderer = static_cast<Renderer_Vulkan*>(Renderer::Instance());
@@ -461,9 +320,6 @@ void VulkanHelper::InitVulkan()
 				DeviceInfo.pEnabledFeatures = nullptr;
 
 				VKCall(vkCreateDevice(VkRenderer->PhysicalDevice, &DeviceInfo, nullptr, &VkRenderer->Device), "Vulkan Logical Device creation Failed.");
-
-				// Create SwapChain
-				CreateSwapChain(VkRenderer);
 			}
 		}
 	}
diff --git a/GraphicsFramework/GraphicsFramework/Source/Rendering/Vulkan/Internal/VulkanHelper.h b/GraphicsFramework/GraphicsFramework/Source/Rendering/Vulkan/Internal/VulkanHelper.h
index 706cb58..04eac1c 100644
--- a/GraphicsFramework/GraphicsFramework/Source/Rendering/Vulkan/Internal/VulkanHelper.h
+++ b/GraphicsFramework/GraphicsFramework/Source/Rendering/Vulkan/Internal/VulkanHelper.h
@@ -1,17 +1,5 @@
 #include "Rendering/Vulkan/Renderer_Vulkan.h"
 
-struct SwapChainDetails
-{
-	VkSurfaceCapabilitiesKHR SurfaceCapabilities;
-	std::vector<VkSurfaceFormatKHR> Formats;
-	std::vector<VkPresentModeKHR> PresentModes;
-
-	bool IsValid();
-	VkExtent2D GetImageExtent();
-	const VkSurfaceFormatKHR& GetSurfaceFormat();
-	const VkPresentModeKHR GetPresentMode();
-};
-
 class VulkanHelper
 {
 public:
@@ -24,11 +12,8 @@ protected:
 	bool AreLayersAvailable(std::vector<const char*> Layers);
 	bool AreExtensionsAvailable(std::vector<const char*> Extensions);
 	bool AreDeviceExtensionsAvailable(std::vector<const char*> Extensions, VkPhysicalDevice PhysicalDevice);
-	SwapChainDetails GetSwapChainDetails(VkPhysicalDevice PhysicalDevice, VkSurfaceKHR Surface);
 	bool IsDeviceSupported(VkPhysicalDevice PhysicalDevice, VkSurfaceKHR Surface, QueueFamilyIndices* OutQueueFamilyData);
 	VkPhysicalDevice GetDesiredPhysicalDevice(VkInstance Instance, VkSurfaceKHR Surface, QueueFamilyIndices* OutQueueFamilyData);
 
 	void CreateDebugMessenger();
-
-	void CreateSwapChain(Renderer_Vulkan* VkRenderer);
 };
\ No newline at end of file
diff --git a/GraphicsFramework/GraphicsFramework/Source/Rendering/Vulkan/Renderer_Vulkan.cpp b/GraphicsFramework/GraphicsFramework/Source/Rendering/Vulkan/Renderer_Vulkan.cpp
index f0d03d6..ae64250 100644
--- a/GraphicsFramework/GraphicsFramework/Source/Rendering/Vulkan/Renderer_Vulkan.cpp
+++ b/GraphicsFramework/GraphicsFramework/Source/Rendering/Vulkan/Renderer_Vulkan.cpp
@@ -29,8 +29,9 @@ Author: Sidhant Tumma
 #include "Rendering/Vulkan/Shader_Vulkan.h"
 #include "Rendering/Vulkan/ComputeShader_Vulkan.h"
 #include "Rendering/Vulkan/Texture_Vulkan.h"
-#include "Rendering/Vulkan/Internal/RenderPass_Vulkan.h"
 // Vulkan Helpers
+#include "Internal/SwapChain_Vulkan.h"
+#include "Internal/RenderPass_Vulkan.h"
 #include "Internal/VulkanHelper.h"
 #include "Internal/CommandBufferPool_Vulkan.h"
 #include "Internal/CommandBuffer_Vulkan.h"
@@ -72,13 +73,16 @@ VKAPI_ATTR VkBool32 VKAPI_CALL Renderer_Vulkan::DebugMessageCallback(VkDebugUtil
 	return false;
 }
 #endif
-
+DISABLE_OPTIMIZATION
 void Renderer_Vulkan::Init()
 {
 	VulkanHelper InitHelper;
 	
 	InitHelper.InitVulkan();
 
+	SwapChain = new SwapChain_Vulkan();
+	SwapChain->Init();
+
 	// Command Queues
 	for (uint32_t i = 0; i < CommandQueueType::Count; ++i)
 	{
@@ -97,15 +101,15 @@ void Renderer_Vulkan::Init()
 	TransientTransferCmdBufferPool->Init(CommandQueueType::Transfer, true /*isTransient*/);
 	
 	ScreenRenderPass = new RenderPass_Vulkan();
-	ScreenRenderPass->Init(SwapChainImageFormat, true, false);
+	ScreenRenderPass->Init(SwapChain->ImageFormat, true, false);
 
 	ImGuiRenderPass = new RenderPass_Vulkan();
-	ImGuiRenderPass->Init(SwapChainImageFormat, false, true);
+	ImGuiRenderPass->Init(SwapChain->ImageFormat, false, true);
 
-	for (const VkImageView& ImageView : SwapChainImageViews)
+	for (const VkImageView& ImageView : SwapChain->ImageViews)
 	{
 		FrameBuffer_Vulkan* frameBuffer = static_cast<FrameBuffer_Vulkan*>(RenderingFactory::Instance()->CreateFrameBuffer());
-		frameBuffer->InitAsBackBuffer(SwapChainImageExtent.width, SwapChainImageExtent.height, ImageView);
+		frameBuffer->InitAsBackBuffer(SwapChain->ImageExtent.width, SwapChain->ImageExtent.height, ImageView);
 		SwapchainFrameBuffers.push_back(frameBuffer);
 	}
 
@@ -130,12 +134,12 @@ void Renderer_Vulkan::Init()
 
 	Viewport.x = 0.0f;
 	Viewport.y = 0.0f;
-	Viewport.width = SwapChainImageExtent.width;
-	Viewport.height = SwapChainImageExtent.height;
+	Viewport.width = SwapChain->ImageExtent.width;
+	Viewport.height = SwapChain->ImageExtent.height;
 	Viewport.minDepth = 0.0f;
 	Viewport.maxDepth = 1.0f;
 
-	ScissorRect.extent = SwapChainImageExtent;
+	ScissorRect.extent = SwapChain->ImageExtent;
 	ScissorRect.offset = { 0, 0 };
 
 	Topology = VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST;
@@ -145,7 +149,7 @@ void Renderer_Vulkan::Init()
 
 	ActiveCopyCommandBuffer = nullptr;
 }
-
+ENABLE_OPTIMIZATION
 void Renderer_Vulkan::Close()
 {
 	VulkanHelper VkHelper;
@@ -154,11 +158,6 @@ void Renderer_Vulkan::Close()
 	delete ImGuiRenderPass;
 	delete ScreenRenderPass;
 
-	for (const VkImageView& ImageView : SwapChainImageViews)
-	{
-		vkDestroyImageView(Device, ImageView, nullptr);
-	}
-
 	for (const FrameBuffer_Vulkan* FrameBuffer : SwapchainFrameBuffers)
 	{
 		delete FrameBuffer;
@@ -186,7 +185,7 @@ void Renderer_Vulkan::Close()
 	delete TransientTransferCmdBufferPool;
 	delete TransientGraphicsCmdBufferPool;
 
-	vkDestroySwapchainKHR(Device, SwapChain, nullptr);
+	delete SwapChain;
 	vkDestroyDevice(Device, nullptr);
 	vkDestroySurfaceKHR(VulkanInstance, Surface, nullptr);
 	VkHelper.DestroyDebugMessenger(DebugMessenger);
@@ -208,27 +207,25 @@ void Renderer_Vulkan::StartFrame()
 
 	VKCall(vkWaitForFences(Device, 1, &InFlightFences[FrameIdx]->mFence, VK_TRUE, UINT64_MAX), "Waiting for Fence failed.");
 
-	VkResult AcquireResult = vkAcquireNextImageKHR(Device, SwapChain, UINT64_MAX, ImageAvailableSemaphores[FrameIdx]->mSemaphore, VK_NULL_HANDLE, &SwapChainImageIdx);
+	SwapChain->AcquireNextImage(ImageAvailableSemaphores[FrameIdx]);
 
 	VKCall(vkResetFences(Device, 1, &InFlightFences[FrameIdx]->mFence), "Fence Reset Failed.");
 
-	GetRenderCommandBuffer()->Reset();
+	GetCommandBuffer()->Reset();
 
 	// Record Command Buffer
-	GetRenderCommandBuffer()->Begin();
+	GetCommandBuffer()->Begin();
 }
 
 void Renderer_Vulkan::SwapBuffers()
 {
-	//vkCmdEndRenderPass(GetRenderCommandBuffer());
-
-	GetRenderCommandBuffer()->End();
+	GetCommandBuffer()->End();
 
 	// Submit Command Buffer
-	GetQueue(CommandQueueType::Graphics)->SubmitCommandBuffer(GetRenderCommandBuffer(), ImageAvailableSemaphores[FrameIdx], RenderingFinishedSemaphores[FrameIdx], InFlightFences[FrameIdx]);
+	GetQueue(CommandQueueType::Graphics)->SubmitCommandBuffer(GetCommandBuffer(), ImageAvailableSemaphores[FrameIdx], RenderingFinishedSemaphores[FrameIdx], InFlightFences[FrameIdx]);
 
 	// Present to Screen
-	GetQueue(CommandQueueType::Present)->PresentToScreen(RenderingFinishedSemaphores[FrameIdx], SwapChain, SwapChainImageIdx);
+	GetQueue(CommandQueueType::Present)->PresentToScreen(RenderingFinishedSemaphores[FrameIdx], SwapChain);
 
 	FrameIdx = (FrameIdx + 1) % BACKBUFFER_COUNT;
 }
@@ -238,7 +235,7 @@ void Renderer_Vulkan::BindShader(const Shader* shader)
 	const Shader_Vulkan* VkShader = static_cast<const Shader_Vulkan*>(shader);
 	if (VkShader)
 	{
-		vkCmdBindPipeline(GetRenderCommandBuffer()->mCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, VkShader->mPipeline);
+		vkCmdBindPipeline(GetCommandBuffer()->mCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, VkShader->mPipeline);
 	}
 }
 
@@ -256,7 +253,7 @@ void Renderer_Vulkan::BindVertexBuffer(const VertexBuffer* vertexBuffer)
 	{
 		VkBuffer Buffers[] = { static_cast<const VertexBuffer_Vulkan*>(vertexBuffer)->MainBufferInfo.Buffer };
 		VkDeviceSize Offsets[] = { 0 };
-		vkCmdBindVertexBuffers(GetRenderCommandBuffer()->mCommandBuffer, 0, ARRAY_SIZE(Buffers), Buffers, Offsets);
+		vkCmdBindVertexBuffers(GetCommandBuffer()->mCommandBuffer, 0, ARRAY_SIZE(Buffers), Buffers, Offsets);
 	}
 }
 
@@ -265,7 +262,7 @@ void Renderer_Vulkan::BindIndexBuffer(const IndexBuffer* indexBuffer)
 	if (indexBuffer)
 	{
 		const IndexBuffer_Vulkan* VkIndexBuffer = static_cast<const IndexBuffer_Vulkan*>(indexBuffer);
-		vkCmdBindIndexBuffer(GetRenderCommandBuffer()->mCommandBuffer, VkIndexBuffer->MainBufferInfo.Buffer, 0, VkIndexBuffer->GetVkIndexType());;
+		vkCmdBindIndexBuffer(GetCommandBuffer()->mCommandBuffer, VkIndexBuffer->MainBufferInfo.Buffer, 0, VkIndexBuffer->GetVkIndexType());;
 	}
 }
 
@@ -274,7 +271,7 @@ void Renderer_Vulkan::BindUniformBuffer(const UniformBuffer* uniformBuffer, unsi
 	const UniformBuffer_Vulkan* VkUbo = static_cast<const UniformBuffer_Vulkan*>(uniformBuffer);
 	if (VkUbo)
 	{
-		vkCmdBindDescriptorSets(GetRenderCommandBuffer()->mCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, *VkUbo->PipelineLayout, 0, 1, &VkUbo->UboDescSet->DescSet, 0, nullptr);
+		vkCmdBindDescriptorSets(GetCommandBuffer()->mCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, *VkUbo->PipelineLayout, 0, 1, &VkUbo->UboDescSet->DescSet, 0, nullptr);
 	}
 }
 
@@ -312,43 +309,43 @@ void Renderer_Vulkan::UnbindTexture(const Texture* texture, unsigned int slot)
 
 void Renderer_Vulkan::Draw(const Shader* Shader, const VertexBuffer* vertexBuffer, int32_t VertexCount, int32_t VertexStart, int32_t InstanceCount, int32_t InstanceStart)
 {
-	ScreenRenderPass->BeginPass(GetRenderCommandBuffer(), static_cast<const FrameBuffer_Vulkan*>(GetBackBuffer()));
+	ScreenRenderPass->BeginPass(GetCommandBuffer(), static_cast<const FrameBuffer_Vulkan*>(GetBackBuffer()));
 
-	vkCmdSetViewport(GetRenderCommandBuffer()->mCommandBuffer, 0, 1, &Viewport);
-	vkCmdSetScissor(GetRenderCommandBuffer()->mCommandBuffer, 0, 1, &ScissorRect);
-	vkCmdSetPrimitiveTopology(GetRenderCommandBuffer()->mCommandBuffer, Topology);
-	vkCmdSetCullMode(GetRenderCommandBuffer()->mCommandBuffer, CullMode);
-	vkCmdSetFrontFace(GetRenderCommandBuffer()->mCommandBuffer, FrontFace);
-	vkCmdSetDepthTestEnable(GetRenderCommandBuffer()->mCommandBuffer, DepthTestEnable);
+	vkCmdSetViewport(GetCommandBuffer()->mCommandBuffer, 0, 1, &Viewport);
+	vkCmdSetScissor(GetCommandBuffer()->mCommandBuffer, 0, 1, &ScissorRect);
+	vkCmdSetPrimitiveTopology(GetCommandBuffer()->mCommandBuffer, Topology);
+	vkCmdSetCullMode(GetCommandBuffer()->mCommandBuffer, CullMode);
+	vkCmdSetFrontFace(GetCommandBuffer()->mCommandBuffer, FrontFace);
+	vkCmdSetDepthTestEnable(GetCommandBuffer()->mCommandBuffer, DepthTestEnable);
 
-	vkCmdBindPipeline(GetRenderCommandBuffer()->mCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, static_cast<const Shader_Vulkan*>(Shader)->mPipeline);
+	vkCmdBindPipeline(GetCommandBuffer()->mCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, static_cast<const Shader_Vulkan*>(Shader)->mPipeline);
 
 	BindVertexBuffer(vertexBuffer);
 
-	vkCmdDraw(GetRenderCommandBuffer()->mCommandBuffer, VertexCount, InstanceCount, VertexStart, InstanceStart);
+	vkCmdDraw(GetCommandBuffer()->mCommandBuffer, VertexCount, InstanceCount, VertexStart, InstanceStart);
 
-	ScreenRenderPass->EndPass(GetRenderCommandBuffer());
+	ScreenRenderPass->EndPass(GetCommandBuffer());
 }
 
 void Renderer_Vulkan::Draw(const VertexBuffer* vertexBuffer, const IndexBuffer* indexBuffer, const Shader* shader)
 {
-	ScreenRenderPass->BeginPass(GetRenderCommandBuffer(), static_cast<const FrameBuffer_Vulkan*>(GetBackBuffer()));
+	ScreenRenderPass->BeginPass(GetCommandBuffer(), static_cast<const FrameBuffer_Vulkan*>(GetBackBuffer()));
 
-	vkCmdSetViewport(GetRenderCommandBuffer()->mCommandBuffer, 0, 1, &Viewport);
-	vkCmdSetScissor(GetRenderCommandBuffer()->mCommandBuffer, 0, 1, &ScissorRect);
-	vkCmdSetPrimitiveTopology(GetRenderCommandBuffer()->mCommandBuffer, Topology);
-	vkCmdSetCullMode(GetRenderCommandBuffer()->mCommandBuffer, CullMode);
-	vkCmdSetFrontFace(GetRenderCommandBuffer()->mCommandBuffer, FrontFace);
-	vkCmdSetDepthTestEnable(GetRenderCommandBuffer()->mCommandBuffer, DepthTestEnable);
+	vkCmdSetViewport(GetCommandBuffer()->mCommandBuffer, 0, 1, &Viewport);
+	vkCmdSetScissor(GetCommandBuffer()->mCommandBuffer, 0, 1, &ScissorRect);
+	vkCmdSetPrimitiveTopology(GetCommandBuffer()->mCommandBuffer, Topology);
+	vkCmdSetCullMode(GetCommandBuffer()->mCommandBuffer, CullMode);
+	vkCmdSetFrontFace(GetCommandBuffer()->mCommandBuffer, FrontFace);
+	vkCmdSetDepthTestEnable(GetCommandBuffer()->mCommandBuffer, DepthTestEnable);
 
-	vkCmdBindPipeline(GetRenderCommandBuffer()->mCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, static_cast<const Shader_Vulkan*>(shader)->mPipeline);
+	vkCmdBindPipeline(GetCommandBuffer()->mCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, static_cast<const Shader_Vulkan*>(shader)->mPipeline);
 
 	BindVertexBuffer(vertexBuffer);
 	BindIndexBuffer(indexBuffer);
 
-	vkCmdDrawIndexed(GetRenderCommandBuffer()->mCommandBuffer, indexBuffer->GetCount(), 1, 0, 0, 0);
+	vkCmdDrawIndexed(GetCommandBuffer()->mCommandBuffer, indexBuffer->GetCount(), 1, 0, 0, 0);
 
-	ScreenRenderPass->EndPass(GetRenderCommandBuffer());
+	ScreenRenderPass->EndPass(GetCommandBuffer());
 }
 
 void Renderer_Vulkan::DebugDraw(const VertexBuffer* vertexBuffer, const IndexBuffer* indexBuffer, const Shader* shader)
diff --git a/GraphicsFramework/GraphicsFramework/Source/Rendering/Vulkan/Renderer_Vulkan.h b/GraphicsFramework/GraphicsFramework/Source/Rendering/Vulkan/Renderer_Vulkan.h
index 75b94d5..3edde41 100644
--- a/GraphicsFramework/GraphicsFramework/Source/Rendering/Vulkan/Renderer_Vulkan.h
+++ b/GraphicsFramework/GraphicsFramework/Source/Rendering/Vulkan/Renderer_Vulkan.h
@@ -73,6 +73,7 @@ class Renderer_Vulkan : public Renderer
 {
 	friend class VulkanHelper;
 	friend class RenderingFactory_Vulkan;
+	friend class SwapChain_Vulkan;
 
 public:
 	static Renderer_Vulkan* Get() { return static_cast<Renderer_Vulkan*>(Renderer::Instance()); }
@@ -133,7 +134,7 @@ public:
 	inline const VkPhysicalDevice& GetPhysicalDevice() { return PhysicalDevice; }
 	inline const VkDevice& GetDevice() { return Device; }
 
-	inline const CommandBuffer_Vulkan* GetRenderCommandBuffer() { return RenderCommandBuffers[FrameIdx]; }
+	inline const CommandBuffer_Vulkan* GetCommandBuffer() { return RenderCommandBuffers[FrameIdx]; }
 	inline const VkClearValue& GetClearValue() { return ClearValue; }
 	inline const uint32_t GetQueueFamilyIndex(CommandQueueType type) { return QueueFamilyData.QueueIndices[type]; }
 	inline const CommandQueue_Vulkan* GetQueue(CommandQueueType type) { return CommandQueues[type]; }
@@ -174,12 +175,7 @@ protected:
 	CommandQueue_Vulkan* CommandQueues[CommandQueueType::Count];
 
 	// SwapChain
-	VkSwapchainKHR SwapChain;
-	VkSwapchainKHR OldSwapChain;
-	std::vector<VkImage> SwapChainImages;
-	std::vector<VkImageView> SwapChainImageViews;
-	VkFormat SwapChainImageFormat = VK_FORMAT_UNDEFINED;
-	VkExtent2D SwapChainImageExtent = {};
+	SwapChain_Vulkan* SwapChain;
 	std::vector<FrameBuffer_Vulkan*> SwapchainFrameBuffers;
 
 	std::vector<Semaphore_Vulkan*> ImageAvailableSemaphores;
@@ -195,7 +191,6 @@ protected:
 	VkDescriptorPool ImGuiDescPool;
 
 	uint8_t FrameIdx;
-	uint32_t SwapChainImageIdx;
 
 	// Dynamic Pipeline
 	VkViewport Viewport;
diff --git a/GraphicsFramework/GraphicsFramework/Source/Rendering/Vulkan/Shader_Vulkan.cpp b/GraphicsFramework/GraphicsFramework/Source/Rendering/Vulkan/Shader_Vulkan.cpp
index 9241378..f14d7c0 100644
--- a/GraphicsFramework/GraphicsFramework/Source/Rendering/Vulkan/Shader_Vulkan.cpp
+++ b/GraphicsFramework/GraphicsFramework/Source/Rendering/Vulkan/Shader_Vulkan.cpp
@@ -30,11 +30,9 @@ Shader_Vulkan::~Shader_Vulkan()
 	vkDestroyPipeline(Renderer_Vulkan::Get()->GetDevice(), mPipeline, nullptr);
 }
 
-void Shader_Vulkan::Init(std::string vertexShaderId, std::string fragmentShaderId)
+void Shader_Vulkan::Init(std::string shaderId)
 {
-	ShaderSource shaders;
-	shaders.vertexSource = ShaderManager::Instance()->GetShaderContents(vertexShaderId);
-	shaders.fragmentSource = ShaderManager::Instance()->GetShaderContents(fragmentShaderId);
+	ShaderSource shaders = ShaderManager::Instance()->GetShaderSource(shaderId);
 
 	std::vector<VkPipelineShaderStageCreateInfo> ShaderStageCreateInfos;
 	VkShaderModule VertexShaderModule = VK_NULL_HANDLE;
diff --git a/GraphicsFramework/GraphicsFramework/Source/Rendering/Vulkan/Shader_Vulkan.h b/GraphicsFramework/GraphicsFramework/Source/Rendering/Vulkan/Shader_Vulkan.h
index 0bad7db..e4cf558 100644
--- a/GraphicsFramework/GraphicsFramework/Source/Rendering/Vulkan/Shader_Vulkan.h
+++ b/GraphicsFramework/GraphicsFramework/Source/Rendering/Vulkan/Shader_Vulkan.h
@@ -23,7 +23,7 @@ public:
 	virtual void Uses(const VertexBuffer* vertexBuffer) override;
 	virtual void Uses(const IndexBuffer* indexBuffer) override;
 
-	virtual void Init(std::string vertexShaderId, std::string fragmentShaderId) override;
+	virtual void Init(std::string shaderId) override;
 
 	VkPipeline mPipeline;
 	VkPipelineLayout mPipelineLayout;
diff --git a/GraphicsFramework/GraphicsFramework/Source/Rendering/Vulkan/UniformBuffer_Vulkan.cpp b/GraphicsFramework/GraphicsFramework/Source/Rendering/Vulkan/UniformBuffer_Vulkan.cpp
index a1f3311..98ab8dd 100644
--- a/GraphicsFramework/GraphicsFramework/Source/Rendering/Vulkan/UniformBuffer_Vulkan.cpp
+++ b/GraphicsFramework/GraphicsFramework/Source/Rendering/Vulkan/UniformBuffer_Vulkan.cpp
@@ -4,7 +4,8 @@
 
 UniformBuffer_Vulkan::UniformBuffer_Vulkan() :
 	UboDescSet(nullptr),
-	PipelineLayout(nullptr)
+	PipelineLayout(nullptr),
+	Binding(0)
 {
 }
 
@@ -22,6 +23,7 @@ void UniformBuffer_Vulkan::Init(uint32_t size, uint32_t binding, const void* dat
 	RenderingFactory_Vulkan* VkFactory = static_cast<RenderingFactory_Vulkan*>(RenderingFactory::Instance());
 	if (VkFactory)
 	{
+		Binding = binding;
 		UboInfo = VkFactory->CreateBuffer(size, VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT, VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT);
 
 		VKCall(vkMapMemory(Renderer_Vulkan::Get()->GetDevice(), UboInfo.BufferMemory, 0, UboInfo.Size, 0, &UboInfo.MappedMemory), "Uniform Buffer memory mapping Failed.");
diff --git a/GraphicsFramework/GraphicsFramework/Source/Rendering/Vulkan/UniformBuffer_Vulkan.h b/GraphicsFramework/GraphicsFramework/Source/Rendering/Vulkan/UniformBuffer_Vulkan.h
index d0d8967..31be01b 100644
--- a/GraphicsFramework/GraphicsFramework/Source/Rendering/Vulkan/UniformBuffer_Vulkan.h
+++ b/GraphicsFramework/GraphicsFramework/Source/Rendering/Vulkan/UniformBuffer_Vulkan.h
@@ -13,8 +13,11 @@ public:
 
 	virtual void Init(uint32_t size, uint32_t binding, const void* data = nullptr) override;
 	virtual void AddData(uint32_t size, const void* data, uint32_t offset = 0) const override;
+	
+	virtual uint32_t GetBinding() const override { return Binding; }
 
 	BufferInfo UboInfo;
 	DescriptorSet_Vulkan* UboDescSet;
 	VkPipelineLayout* PipelineLayout;
+	uint32_t Binding;
 };
diff --git a/GraphicsFramework/GraphicsFramework/Source/Utils/JSONHelper.h b/GraphicsFramework/GraphicsFramework/Source/Utils/JSONHelper.h
index 084dfee..ce59ea7 100644
--- a/GraphicsFramework/GraphicsFramework/Source/Utils/JSONHelper.h
+++ b/GraphicsFramework/GraphicsFramework/Source/Utils/JSONHelper.h
@@ -18,7 +18,7 @@ public:
 		file.close(); 
 		rapidjson::Document root; 
 		root.Parse(contents.c_str()); 
-		if (!root.IsObject()) { std::cout << "Error reading JSON file" << path << std::endl; }
+		if (!root.IsObject()) { std::cout << "Error reading JSON file " << path << std::endl; }
 		return root;
 	}
 	
diff --git a/GraphicsFramework/UnitTests/IndexBufferTest.cpp b/GraphicsFramework/UnitTests/IndexBufferTest.cpp
index 01ecbe5..816bc47 100644
--- a/GraphicsFramework/UnitTests/IndexBufferTest.cpp
+++ b/GraphicsFramework/UnitTests/IndexBufferTest.cpp
@@ -37,7 +37,7 @@ void IndexBufferTest::Init()
 	BasicShader = RenderingFactory::Instance()->CreateShader();
 	BasicShader->Uses(VBuffer);
 	BasicShader->Uses(IBuffer);
-	BasicShader->Init("INDEXBUFFER_TEST_VERT", "INDEXBUFFER_TEST_FRAG");
+	BasicShader->Init("INDEXBUFFER_TEST");
 }
 
 void IndexBufferTest::Close()
diff --git a/GraphicsFramework/UnitTests/ShaderTest.cpp b/GraphicsFramework/UnitTests/ShaderTest.cpp
index 6ce880e..a5e5985 100644
--- a/GraphicsFramework/UnitTests/ShaderTest.cpp
+++ b/GraphicsFramework/UnitTests/ShaderTest.cpp
@@ -8,7 +8,7 @@
 void ShaderTest::Init()
 {
 	BasicShader = RenderingFactory::Instance()->CreateShader();
-	BasicShader->Init("SHADER_TEST_VERT", "SHADER_TEST_FRAG");
+	BasicShader->Init("SHADER_TEST");
 }
 
 void ShaderTest::Close()
diff --git a/GraphicsFramework/UnitTests/UniformBufferTest.cpp b/GraphicsFramework/UnitTests/UniformBufferTest.cpp
index e5b81ae..2ab7c2c 100644
--- a/GraphicsFramework/UnitTests/UniformBufferTest.cpp
+++ b/GraphicsFramework/UnitTests/UniformBufferTest.cpp
@@ -49,6 +49,8 @@ void UniformBufferTest::Init()
 	MatrixData.View = glm::lookAt(glm::vec3(2.f, 2.f, 2.f), glm::vec3(0.f), glm::vec3(0.f, 0.f, 1.f));
 	MatrixData.Model = glm::mat4(1.f);
 
+	UboBinding = 3;
+
 	UBuffer = RenderingFactory::Instance()->CreateUniformBuffer();
 	UBuffer->Init(sizeof(Matrices), UboBinding, &MatrixData);
 
@@ -56,7 +58,7 @@ void UniformBufferTest::Init()
 	BasicShader->Uses(VBuffer);
 	BasicShader->Uses(IBuffer);
 	BasicShader->Uses(UBuffer, UboBinding);
-	BasicShader->Init("UNIFORMBUFFER_TEST_VERT", "UNIFORMBUFFER_TEST_FRAG");
+	BasicShader->Init("UNIFORMBUFFER_TEST");
 
 	RunTime = 0.f;
 	RotateX = false;
diff --git a/GraphicsFramework/UnitTests/VertexBufferTest.cpp b/GraphicsFramework/UnitTests/VertexBufferTest.cpp
index ca50b93..4223a70 100644
--- a/GraphicsFramework/UnitTests/VertexBufferTest.cpp
+++ b/GraphicsFramework/UnitTests/VertexBufferTest.cpp
@@ -30,7 +30,7 @@ void VertexBufferTest::Init()
 
 	BasicShader = RenderingFactory::Instance()->CreateShader();
 	BasicShader->Uses(VBuffer);
-	BasicShader->Init("VERTEXBUFFER_TEST_VERT", "VERTEXBUFFER_TEST_FRAG");
+	BasicShader->Init("VERTEXBUFFER_TEST");
 
 	TestTime = 0.0f;
 }
diff --git a/GraphicsFramework/UnitTests/res/ShadersList.json b/GraphicsFramework/UnitTests/res/ShadersList.json
index 442ef25..bee5ae8 100644
--- a/GraphicsFramework/UnitTests/res/ShadersList.json
+++ b/GraphicsFramework/UnitTests/res/ShadersList.json
@@ -1,45 +1,33 @@
 {
   "Shaders": [
     {
-      "Id": "SHADER_TEST_VERT",
-      "Path": "res/ShaderTest.vert",
-      "Api": "OPENGL"
+      "Id": "SHADER_TEST",
+      "VertexShader": [
+        {
+          "Api": "OPENGL",
+          "Variant": "res/ShaderTest.vert"
+        },
+        {
+          "Api": "VULKAN",
+          "Variant": "res/Vulkan/ShaderTest.vert"
+        }
+      ],
+      "FragmentShader": "res/ShaderTest.frag"
     },
     {
-      "Id": "SHADER_TEST_VERT",
-      "Path": "res/Vulkan/ShaderTest.vert",
-      "Api": "VULKAN"
+      "Id": "VERTEXBUFFER_TEST",
+      "VertexShader": "res/VertexBufferTest.vert",
+      "FragmentShader": "res/VertexBufferTest.frag"
     },
     {
-      "Id": "SHADER_TEST_FRAG",
-      "Path": "res/ShaderTest.frag"
+      "Id": "INDEXBUFFER_TEST",
+      "VertexShader": "res/IndexBufferTest.vert",
+      "FragmentShader": "res/IndexBufferTest.frag"
     },
-
     {
-      "Id": "VERTEXBUFFER_TEST_VERT",
-      "Path": "res/VertexBufferTest.vert"
-    },
-    {
-      "Id": "VERTEXBUFFER_TEST_FRAG",
-      "Path": "res/VertexBufferTest.frag"
-    },
-
-    {
-      "Id": "INDEXBUFFER_TEST_VERT",
-      "Path": "res/IndexBufferTest.vert"
-    },
-    {
-      "Id": "INDEXBUFFER_TEST_FRAG",
-      "Path": "res/IndexBufferTest.frag"
-    },
-
-    {
-      "Id": "UNIFORMBUFFER_TEST_VERT",
-      "Path": "res/UniformBufferTest.vert"
-    },
-    {
-      "Id": "UNIFORMBUFFER_TEST_FRAG",
-      "Path": "res/UniformBufferTest.frag"
+      "Id": "UNIFORMBUFFER_TEST",
+      "VertexShader": "res/UniformBufferTest.vert",
+      "FragmentShader": "res/UniformBufferTest.frag"
     }
   ]
 }
\ No newline at end of file
diff --git a/GraphicsFramework/UnitTests/res/UniformBufferTest.vert b/GraphicsFramework/UnitTests/res/UniformBufferTest.vert
index 677cb28..1ef201b 100644
--- a/GraphicsFramework/UnitTests/res/UniformBufferTest.vert
+++ b/GraphicsFramework/UnitTests/res/UniformBufferTest.vert
@@ -1,6 +1,6 @@
 #version 450
 
-layout (binding = 0) uniform Matrices
+layout (binding = 3) uniform Matrices
 {
 	mat4 Perspective;
 	mat4 View;
diff --git a/GraphicsFramework/UnitTests/res/UniformBufferTest.vert.spv b/GraphicsFramework/UnitTests/res/UniformBufferTest.vert.spv
index 9682bf8..5242820 100644
Binary files a/GraphicsFramework/UnitTests/res/UniformBufferTest.vert.spv and b/GraphicsFramework/UnitTests/res/UniformBufferTest.vert.spv differ
diff --git a/GraphicsFramework/VulkanTest/Shader.frag.spv b/GraphicsFramework/VulkanTest/Shader.frag.spv
deleted file mode 100644
index cac1578..0000000
Binary files a/GraphicsFramework/VulkanTest/Shader.frag.spv and /dev/null differ
diff --git a/GraphicsFramework/VulkanTest/Shader.vert.spv b/GraphicsFramework/VulkanTest/Shader.vert.spv
deleted file mode 100644
index ffd1d00..0000000
Binary files a/GraphicsFramework/VulkanTest/Shader.vert.spv and /dev/null differ
